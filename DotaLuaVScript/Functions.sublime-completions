{
	"scope": "source.lua",

	"completions":
	[
		{ "trigger": "SpawnEntityGroupFromTable", "contents": "SpawnEntityGroupFromTable(${1:handle groupSpawnTables}, ${2:bool bAsync}, ${3:handle hCallback})" },
		{ "trigger": "Say", "contents": "Say(${1:handle entity}, ${2:string message}, ${3:bool teamOnly})" },
		{ "trigger": "IsDedicatedServer", "contents": "IsDedicatedServer()" },
		{ "trigger": "ListenToGameEvent", "contents": "ListenToGameEvent(${1:string EventName}, ${2:handle functionNameToCall}, ${3:handle context})" },
		{ "trigger": "GetWorldMinY", "contents": "GetWorldMinY()" },
		{ "trigger": "GetListenServerHost", "contents": "GetListenServerHost()" },
		{ "trigger": "GetMapName", "contents": "GetMapName()" },
		{ "trigger": "ReloadMOTD", "contents": "ReloadMOTD()" },
		{ "trigger": "RandomVector", "contents": "RandomVector(${1:float maxLength})" },
		{ "trigger": "GetWorldMaxX", "contents": "GetWorldMaxX()" },
		{ "trigger": "CreateItem", "contents": "CreateItem(${1:string item_name}, ${2:handle owner}, ${3:handle owner})" },
		{ "trigger": "DebugDrawClear", "contents": "DebugDrawClear()" },
		{ "trigger": "AngleDiff", "contents": "AngleDiff(${1:float ang1}, ${2:float ang2})" },
		{ "trigger": "GetSystemDate", "contents": "GetSystemDate()" },
		{ "trigger": "DebugBreak", "contents": "DebugBreak()" },
		{ "trigger": "FindUnitsInRadius", "contents": "FindUnitsInRadius(${1:int teamNumber}, ${2:Vector position}, ${3:handle cacheUnit}, ${4:float radius}, ${5:int teamFilter}, ${6:int typeFilter}, ${7:int flagFilter}, ${8:int order}, ${9:bool canGrowCache})" },
		{ "trigger": "FrameTime", "contents": "FrameTime()" },
		{ "trigger": "GetWorldMaxY", "contents": "GetWorldMaxY()" },
		{ "trigger": "GetFrameCount", "contents": "GetFrameCount()" },
		{ "trigger": "GetSystemTime", "contents": "GetSystemTime()" },
		{ "trigger": "ShowGenericPopup", "contents": "ShowGenericPopup(${1:string title}, ${2:string content}, ${3:string unknown}, ${4:string unknown}, ${5:int containerType})" },
		{ "trigger": "FileToString", "contents": "FileToString(${1:string })" },
		{ "trigger": "rr_GetResponseTargets", "contents": "rr_GetResponseTargets()" },
		{ "trigger": "SendFrostivusTimeElapsedToGC", "contents": "SendFrostivusTimeElapsedToGC()" },
		{ "trigger": "GetWorldMinX", "contents": "GetWorldMinX()" },
		{ "trigger": "FireGameEvent", "contents": "FireGameEvent(${1:string eventName}, ${2:handle parameterTable})" },
		{ "trigger": "Time", "contents": "Time()" },
		{ "trigger": "StringToFile", "contents": "StringToFile(${1:string }, ${2:string })" },
		{ "trigger": "ApplyDamage", "contents": "ApplyDamage(${1:handle DamageTable})" },
		{ "trigger": "StopSoundOn", "contents": "StopSoundOn(${1:string soundName}, ${2:handle playingEntity})" },
		{ "trigger": "GetBaseVelocity", "contents": "GetBaseVelocity()" },
		{ "trigger": "SetSize", "contents": "SetSize(${1:Vector }, ${2:Vector })" },
		{ "trigger": "SetRenderColor", "contents": "SetRenderColor(${1:int }, ${2:int }, ${3:int })" },
		{ "trigger": "Trigger", "contents": "Trigger()" },
		{ "trigger": "SetOwner", "contents": "SetOwner(${1:handle owningEntity})" },
		{ "trigger": "SetAbsOrigin", "contents": "SetAbsOrigin(${1:Vector origin})" },
		{ "trigger": "SetAngularVelocity", "contents": "SetAngularVelocity(${1:float pitch}, ${2:float yaw}, ${3:float roll})" },
		{ "trigger": "GetOwner", "contents": "GetOwner()" },
		{ "trigger": "GetOwnerEntity", "contents": "GetOwnerEntity()" },
		{ "trigger": "GetChildren", "contents": "GetChildren()" },
		{ "trigger": "SetMaxHealth", "contents": "SetMaxHealth(${1:int maxHP})" },
		{ "trigger": "GetCenter", "contents": "GetCenter()" },
		{ "trigger": "Kill", "contents": "Kill()" },
		{ "trigger": "FirstMoveChild", "contents": "FirstMoveChild()" },
		{ "trigger": "GetMoveParent", "contents": "GetMoveParent()" },
		{ "trigger": "SetForwardVector", "contents": "SetForwardVector(${1:Vector forwardVec})" },
		{ "trigger": "GetAbsOrigin", "contents": "GetAbsOrigin()" },
		{ "trigger": "GetAngularVelocity", "contents": "GetAngularVelocity()" },
		{ "trigger": "NextMovePeer", "contents": "NextMovePeer()" },
		{ "trigger": "GetMaxHealth", "contents": "GetMaxHealth()" },
		{ "trigger": "GetBounds", "contents": "GetBounds()" },
		{ "trigger": "SetTeam", "contents": "SetTeam(${1:int team})" },
		{ "trigger": "GetHealth", "contents": "GetHealth()" },
		{ "trigger": "GetForwardVector", "contents": "GetForwardVector()" },
		{ "trigger": "GetBoundingMaxs", "contents": "GetBoundingMaxs()" },
		{ "trigger": "GetModelName", "contents": "GetModelName()" },
		{ "trigger": "EmitSoundParams", "contents": "EmitSoundParams(${1:string soundName}, ${2:int pitch}, ${3:float volume}, ${4:float soundTime})" },
		{ "trigger": "GetTeam", "contents": "GetTeam()" },
		{ "trigger": "GetAngles", "contents": "GetAngles()" },
		{ "trigger": "SetHealth", "contents": "SetHealth(${1:int hp})" },
		{ "trigger": "IsAlive", "contents": "IsAlive()" },
		{ "trigger": "GetAnglesAsVector", "contents": "GetAnglesAsVector()" },
		{ "trigger": "EmitSound", "contents": "EmitSound(${1:string soundName})" },
		{ "trigger": "SetAngles", "contents": "SetAngles(${1:float pitch}, ${2:float yaw}, ${3:float roll})" },
		{ "trigger": "EyeAngles", "contents": "EyeAngles()" },
		{ "trigger": "EyePosition", "contents": "EyePosition()" },
		{ "trigger": "GetRootMoveParent", "contents": "GetRootMoveParent()" },
		{ "trigger": "SetModel", "contents": "SetModel(${1:string modelName})" },
		{ "trigger": "GetUpVector", "contents": "GetUpVector()" },
		{ "trigger": "IsPlayer", "contents": "IsPlayer()" },
		{ "trigger": "GetVelocity", "contents": "GetVelocity()" },
		{ "trigger": "GetLocalVelocity", "contents": "GetLocalVelocity()" },
		{ "trigger": "StopSound", "contents": "StopSound(${1:string soundName})" },
		{ "trigger": "SetOrigin", "contents": "SetOrigin(${1:Vector origin})" },
		{ "trigger": "GetSoundDuration", "contents": "GetSoundDuration(${1:string soundName}, ${2:string actormodelname})" },
		{ "trigger": "GetLocalAngularVelocity", "contents": "GetLocalAngularVelocity()" },
		{ "trigger": "GetOrigin", "contents": "GetOrigin()" },
		{ "trigger": "GetBoundingMins", "contents": "GetBoundingMins()" },
		{ "trigger": "GetRightVector", "contents": "GetRightVector()" },
		{ "trigger": "First", "contents": "First()" },
		{ "trigger": "FindAllByModel", "contents": "FindAllByModel(${1:string modelName})" },
		{ "trigger": "FindByName", "contents": "FindByName(${1:handle lastEnt}, ${2:string searchString})" },
		{ "trigger": "FindByNameWithin", "contents": "FindByNameWithin(${1:handle startFrom}, ${2:string name}, ${3:Vector origin}, ${4:float maxRadius})" },
		{ "trigger": "FindAllByTarget", "contents": "FindAllByTarget(${1:string targetName})" },
		{ "trigger": "FindByClassname", "contents": "FindByClassname(${1:handle startFrom}, ${2:string className})" },
		{ "trigger": "FindAllByName", "contents": "FindAllByName(${1:string name})" },
		{ "trigger": "FindByModel", "contents": "FindByModel(${1:handle startFrom}, ${2:string modelName})" },
		{ "trigger": "FindAllByNameWithin", "contents": "FindAllByNameWithin(${1:string name}, ${2:Vector origin}, ${3:float maxRadius})" },
		{ "trigger": "FindByClassnameWithin", "contents": "FindByClassnameWithin(${1:handle startFrom}, ${2:string className}, ${3:Vector origin}, ${4:float maxRadius})" },
		{ "trigger": "FindByClassnameNearest", "contents": "FindByClassnameNearest(${1:string className}, ${2:Vector origin}, ${3:float maxRadius})" },
		{ "trigger": "FindByTarget", "contents": "FindByTarget(${1:handle startFrom}, ${2:string targetName})" },
		{ "trigger": "FindByNameNearest", "contents": "FindByNameNearest(${1:string name}, ${2:Vector origin}, ${3:float maxRadius})" },
		{ "trigger": "CreateByClassname", "contents": "CreateByClassname(${1:string className})" },
		{ "trigger": "FindAllInSphere", "contents": "FindAllInSphere(${1:Vector origin}, ${2:float maxRadius})" },
		{ "trigger": "Next", "contents": "Next(${1:handle startFrom})" },
		{ "trigger": "FindInSphere", "contents": "FindInSphere(${1:handle startFrom}, ${2:Vector origin}, ${3:float maxRadius})" },
		{ "trigger": "FindByModelWithin", "contents": "FindByModelWithin(${1:handle startFrom}, ${2:string modelName}, ${3:Vector origin}, ${4:float maxRadius})" },
		{ "trigger": "GetEntityIndex", "contents": "GetEntityIndex()" },
		{ "trigger": "GetOrCreatePublicScriptScope", "contents": "GetOrCreatePublicScriptScope()" },
		{ "trigger": "GetOrCreatePrivateScriptScope", "contents": "GetOrCreatePrivateScriptScope()" },
		{ "trigger": "GetPrivateScriptScope", "contents": "GetPrivateScriptScope()" },
		{ "trigger": "FireOutput", "contents": "FireOutput(${1:string outputName}, ${2:handle activator}, ${3:handle caller}, ${4:table args}, ${5:float delay})" },
		{ "trigger": "GetDebugName", "contents": "GetDebugName()" },
		{ "trigger": "Destroy", "contents": "Destroy()" },
		{ "trigger": "GetClassname", "contents": "GetClassname()" },
		{ "trigger": "GetName", "contents": "GetName()" },
		{ "trigger": "entindex", "contents": "entindex()" },
		{ "trigger": "GetEntityHandle", "contents": "GetEntityHandle()" },
		{ "trigger": "RemoveSelf", "contents": "RemoveSelf()" },
		{ "trigger": "GetPublicScriptScope", "contents": "GetPublicScriptScope()" },
		{ "trigger": "GetAnimationIgnoresModelScale", "contents": "GetAnimationIgnoresModelScale()" },
		{ "trigger": "IsSharedWithTeammates", "contents": "IsSharedWithTeammates()" },
		{ "trigger": "OnHeroLevelUp", "contents": "OnHeroLevelUp()" },
		{ "trigger": "ToggleAutoCast", "contents": "ToggleAutoCast()" },
		{ "trigger": "GetDuration", "contents": "GetDuration()" },
		{ "trigger": "IsChanneling", "contents": "IsChanneling()" },
		{ "trigger": "GetAbilityTargetType", "contents": "GetAbilityTargetType()" },
		{ "trigger": "GetAbilityName", "contents": "GetAbilityName()" },
		{ "trigger": "PlaysDefaultAnimWhenStolen", "contents": "PlaysDefaultAnimWhenStolen()" },
		{ "trigger": "IsActivated", "contents": "IsActivated()" },
		{ "trigger": "OnAbilityPhaseInterrupted", "contents": "OnAbilityPhaseInterrupted()" },
		{ "trigger": "IsPassive", "contents": "IsPassive()" },
		{ "trigger": "GetBackswingTime", "contents": "GetBackswingTime()" },
		{ "trigger": "GetCooldownTime", "contents": "GetCooldownTime()" },
		{ "trigger": "PayManaCost", "contents": "PayManaCost()" },
		{ "trigger": "GetAssociatedSecondaryAbilities", "contents": "GetAssociatedSecondaryAbilities()" },
		{ "trigger": "GetStolenActivityModifier", "contents": "GetStolenActivityModifier()" },
		{ "trigger": "SpeakTrigger", "contents": "SpeakTrigger()" },
		{ "trigger": "PayGoldCostForUpgrade", "contents": "PayGoldCostForUpgrade()" },
		{ "trigger": "GetModifierValue", "contents": "GetModifierValue()" },
		{ "trigger": "GetCursorTargetingNothing", "contents": "GetCursorTargetingNothing()" },
		{ "trigger": "GetCooldownTimeRemaining", "contents": "GetCooldownTimeRemaining()" },
		{ "trigger": "GetChannelStartTime", "contents": "GetChannelStartTime()" },
		{ "trigger": "GetCursorPosition", "contents": "GetCursorPosition()" },
		{ "trigger": "GetToggleState", "contents": "GetToggleState()" },
		{ "trigger": "IsInAbilityPhase", "contents": "IsInAbilityPhase()" },
		{ "trigger": "ProcsMagicStick", "contents": "ProcsMagicStick()" },
		{ "trigger": "ToggleAbility", "contents": "ToggleAbility()" },
		{ "trigger": "IsHiddenWhenStolen", "contents": "IsHiddenWhenStolen()" },
		{ "trigger": "OnSpellStart", "contents": "OnSpellStart()" },
		{ "trigger": "CastAbility", "contents": "CastAbility()" },
		{ "trigger": "GetIntrinsicModifierName", "contents": "GetIntrinsicModifierName()" },
		{ "trigger": "IsHidden", "contents": "IsHidden()" },
		{ "trigger": "GetAbilityTargetTeam", "contents": "GetAbilityTargetTeam()" },
		{ "trigger": "IsCooldownReady", "contents": "IsCooldownReady()" },
		{ "trigger": "IsToggle", "contents": "IsToggle()" },
		{ "trigger": "GetCastPoint", "contents": "GetCastPoint()" },
		{ "trigger": "OnUpgrade", "contents": "OnUpgrade()" },
		{ "trigger": "GetLevel", "contents": "GetLevel()" },
		{ "trigger": "DecrementModifierRefCount", "contents": "DecrementModifierRefCount()" },
		{ "trigger": "GetAbilityType", "contents": "GetAbilityType()" },
		{ "trigger": "IsAttributeBonus", "contents": "IsAttributeBonus()" },
		{ "trigger": "MarkAbilityButtonDirty", "contents": "MarkAbilityButtonDirty()" },
		{ "trigger": "GetAbilityTargetFlags", "contents": "GetAbilityTargetFlags()" },
		{ "trigger": "OnHeroCalculateStatBonus", "contents": "OnHeroCalculateStatBonus()" },
		{ "trigger": "GetAbilityDamageType", "contents": "GetAbilityDamageType()" },
		{ "trigger": "RefCountsModifiers", "contents": "RefCountsModifiers()" },
		{ "trigger": "ResetToggleOnRespawn", "contents": "ResetToggleOnRespawn()" },
		{ "trigger": "GetPlaybackRateOverride", "contents": "GetPlaybackRateOverride()" },
		{ "trigger": "IsStealable", "contents": "IsStealable()" },
		{ "trigger": "OnAbilityPhaseStart", "contents": "OnAbilityPhaseStart()" },
		{ "trigger": "ShouldUseResources", "contents": "ShouldUseResources()" },
		{ "trigger": "GetAssociatedPrimaryAbilities", "contents": "GetAssociatedPrimaryAbilities()" },
		{ "trigger": "IsOwnersGoldEnoughForUpgrade", "contents": "IsOwnersGoldEnoughForUpgrade()" },
		{ "trigger": "GetModifierValueBonus", "contents": "GetModifierValueBonus()" },
		{ "trigger": "OnOwnerDied", "contents": "OnOwnerDied()" },
		{ "trigger": "IsFullyCastable", "contents": "IsFullyCastable()" },
		{ "trigger": "GetMaxLevel", "contents": "GetMaxLevel()" },
		{ "trigger": "PayGoldCost", "contents": "PayGoldCost()" },
		{ "trigger": "OnOwnerSpawned", "contents": "OnOwnerSpawned()" },
		{ "trigger": "OnInventoryContentsChanged", "contents": "OnInventoryContentsChanged()" },
		{ "trigger": "GetConceptRecipientType", "contents": "GetConceptRecipientType()" },
		{ "trigger": "GetBehavior", "contents": "GetBehavior()" },
		{ "trigger": "GetCloneSource", "contents": "GetCloneSource()" },
		{ "trigger": "GetSharedCooldownName", "contents": "GetSharedCooldownName()" },
		{ "trigger": "ContinueCasting", "contents": "ContinueCasting()" },
		{ "trigger": "GetAbilityDamage", "contents": "GetAbilityDamage()" },
		{ "trigger": "IsStolen", "contents": "IsStolen()" },
		{ "trigger": "IsOwnersManaEnough", "contents": "IsOwnersManaEnough()" },
		{ "trigger": "GetAbilityIndex", "contents": "GetAbilityIndex()" },
		{ "trigger": "NumModifiersUsingAbility", "contents": "NumModifiersUsingAbility()" },
		{ "trigger": "IsItem", "contents": "IsItem()" },
		{ "trigger": "EndCooldown", "contents": "EndCooldown()" },
		{ "trigger": "GetHeroLevelRequiredToUpgrade", "contents": "GetHeroLevelRequiredToUpgrade()" },
		{ "trigger": "GetAutoCastState", "contents": "GetAutoCastState()" },
		{ "trigger": "GetChannelTime", "contents": "GetChannelTime()" },
		{ "trigger": "GetCaster", "contents": "GetCaster()" },
		{ "trigger": "RefundManaCost", "contents": "RefundManaCost()" },
		{ "trigger": "IncrementModifierRefCount", "contents": "IncrementModifierRefCount()" },
		{ "trigger": "IsTrained", "contents": "IsTrained()" },
		{ "trigger": "GetCursorTarget", "contents": "GetCursorTarget()" },
		{ "trigger": "OnToggle", "contents": "OnToggle()" },
		{ "trigger": "GetCastCount", "contents": "GetCastCount()" },
		{ "trigger": "GetPurchaseTime", "contents": "GetPurchaseTime()" },
		{ "trigger": "GetInitialCharges", "contents": "GetInitialCharges()" },
		{ "trigger": "GetContainer", "contents": "GetContainer()" },
		{ "trigger": "Think", "contents": "Think()" },
		{ "trigger": "LaunchLoot", "contents": "LaunchLoot(${1:bool useOnContact}, ${2:float height}, ${3:float speed}, ${4:Vector destination})" },
		{ "trigger": "GetCurrentCharges", "contents": "GetCurrentCharges()" },
		{ "trigger": "GetPurchaser", "contents": "GetPurchaser()" },
		{ "trigger": "GetShareability", "contents": "GetShareability()" },
		{ "trigger": "GetCost", "contents": "GetCost()" },
		{ "trigger": "IsPermanent", "contents": "IsPermanent()" },
		{ "trigger": "StacksWithOtherOwners", "contents": "StacksWithOtherOwners()" },
		{ "trigger": "GetCreationTime", "contents": "GetCreationTime()" },
		{ "trigger": "GetContainedItem", "contents": "GetContainedItem()" },
		{ "trigger": "GetTail", "contents": "GetTail()" },
		{ "trigger": "IsTailAlive", "contents": "IsTailAlive()" },
		{ "trigger": "IsHornAlive", "contents": "IsHornAlive()" },
		{ "trigger": "GetHorn", "contents": "GetHorn()" },
		{ "trigger": "IsNoclipping", "contents": "IsNoclipping()" },
		{ "trigger": "GetControlledRPGUnit", "contents": "GetControlledRPGUnit()" },
		{ "trigger": "GetAssignedHero", "contents": "GetAssignedHero()" },
		{ "trigger": "GetPlayerID", "contents": "GetPlayerID()" },
		{ "trigger": "SetMusicStatus", "contents": "SetMusicStatus(${1:int nMusicStatus}, ${2:float flIntensity})" },
		{ "trigger": "MakeRandomHeroSelection", "contents": "MakeRandomHeroSelection()" },
		{ "trigger": "IsValidPlayerID", "contents": "IsValidPlayerID(${1:int playerID})" },
		{ "trigger": "IsValidTeamPlayer", "contents": "IsValidTeamPlayer(${1:int playerID})" },
		{ "trigger": "SetHasRandomed", "contents": "SetHasRandomed(${1:int playerID})" },
		{ "trigger": "GetLastHits", "contents": "GetLastHits(${1:int playerID})" },
		{ "trigger": "IsValidPlayer", "contents": "IsValidPlayer(${1:int playerID})" },
		{ "trigger": "GetGold", "contents": "GetGold(${1:int playerID})" },
		{ "trigger": "HaveAllPlayersJoined", "contents": "HaveAllPlayersJoined()" },
		{ "trigger": "GetLevel", "contents": "GetLevel(${1:int playerID})" },
		{ "trigger": "IsValidTeamPlayerID", "contents": "IsValidTeamPlayerID(${1:int playerID})" },
		{ "trigger": "SpendGold", "contents": "SpendGold(${1:int playerID}, ${2:int amount}, ${3:int reason})" },
		{ "trigger": "GetPlayer", "contents": "GetPlayer(${1:int playerID})" },
		{ "trigger": "SetGold", "contents": "SetGold(${1:int playerID}, ${2:int amount}, ${3:bool reliableGold})" },
		{ "trigger": "GetUnreliableGold", "contents": "GetUnreliableGold(${1:int playerID})" },
		{ "trigger": "IncrementKills", "contents": "IncrementKills(${1:int playerID}, ${2:int kills})" },
		{ "trigger": "IncrementAssists", "contents": "IncrementAssists(${1:int playerID})" },
		{ "trigger": "GetKills", "contents": "GetKills(${1:int playerID})" },
		{ "trigger": "GetKillsDoneToHero", "contents": "GetKillsDoneToHero(${1:int attackerPlayerID}, ${2:int victimPlayerID})" },
		{ "trigger": "GetReliableGold", "contents": "GetReliableGold(${1:int playerID})" },
		{ "trigger": "HasRepicked", "contents": "HasRepicked(${1:int playerID})" },
		{ "trigger": "SetHasRepicked", "contents": "SetHasRepicked(${1:int playerID})" },
		{ "trigger": "GetAbilityCount", "contents": "GetAbilityCount()" },
		{ "trigger": "GetAdditionalBattleMusicWeight", "contents": "GetAdditionalBattleMusicWeight()" },
		{ "trigger": "GetPlayerOwnerID", "contents": "GetPlayerOwnerID()" },
		{ "trigger": "GetBaseDayTimeVisionRange", "contents": "GetBaseDayTimeVisionRange()" },
		{ "trigger": "IsMuted", "contents": "IsMuted()" },
		{ "trigger": "IsMechanical", "contents": "IsMechanical()" },
		{ "trigger": "IsRealHero", "contents": "IsRealHero()" },
		{ "trigger": "GetModelRadius", "contents": "GetModelRadius()" },
		{ "trigger": "GetAverageTrueAttackDamage", "contents": "GetAverageTrueAttackDamage()" },
		{ "trigger": "GetPaddedCollisionRadius", "contents": "GetPaddedCollisionRadius()" },
		{ "trigger": "GetAttackSpeed", "contents": "GetAttackSpeed()" },
		{ "trigger": "GetManaRegen", "contents": "GetManaRegen()" },
		{ "trigger": "IsDeniable", "contents": "IsDeniable()" },
		{ "trigger": "GetAttackRange", "contents": "GetAttackRange()" },
		{ "trigger": "GetInitialGoalEntity", "contents": "GetInitialGoalEntity()" },
		{ "trigger": "GetUnitName", "contents": "GetUnitName()" },
		{ "trigger": "RespawnUnit", "contents": "RespawnUnit()" },
		{ "trigger": "CastAbilityImmediately", "contents": "CastAbilityImmediately(${1:handle ability}, ${2:int playerIndex})" },
		{ "trigger": "IsAncient", "contents": "IsAncient()" },
		{ "trigger": "GetHealthRegen", "contents": "GetHealthRegen()" },
		{ "trigger": "GetAttackDamage", "contents": "GetAttackDamage()" },
		{ "trigger": "Stop", "contents": "Stop()" },
		{ "trigger": "SetOriginalModel", "contents": "SetOriginalModel(${1:string originalModel})" },
		{ "trigger": "IsOutOfGame", "contents": "IsOutOfGame()" },
		{ "trigger": "GetCreationTime", "contents": "GetCreationTime()" },
		{ "trigger": "GetNightTimeVisionRange", "contents": "GetNightTimeVisionRange()" },
		{ "trigger": "AngerNearbyUnits", "contents": "AngerNearbyUnits()" },
		{ "trigger": "InterruptChannel", "contents": "InterruptChannel()" },
		{ "trigger": "UnitCanRespawn", "contents": "UnitCanRespawn()" },
		{ "trigger": "NotOnMinimapForEnemies", "contents": "NotOnMinimapForEnemies()" },
		{ "trigger": "GetHealthPercent", "contents": "GetHealthPercent()" },
		{ "trigger": "IsPhantomBlocker", "contents": "IsPhantomBlocker()" },
		{ "trigger": "MakePhantomBlocker", "contents": "MakePhantomBlocker()" },
		{ "trigger": "IsInvulnerable", "contents": "IsInvulnerable()" },
		{ "trigger": "GetAttackRangeBuffer", "contents": "GetAttackRangeBuffer()" },
		{ "trigger": "IsFrozen", "contents": "IsFrozen()" },
		{ "trigger": "GetBaseNightTimeVisionRange", "contents": "GetBaseNightTimeVisionRange()" },
		{ "trigger": "GetOpposingTeamNumber", "contents": "GetOpposingTeamNumber()" },
		{ "trigger": "GetModifierCount", "contents": "GetModifierCount()" },
		{ "trigger": "GetHullRadius", "contents": "GetHullRadius()" },
		{ "trigger": "ShouldIdleAcquire", "contents": "ShouldIdleAcquire()" },
		{ "trigger": "RemoveNoDraw", "contents": "RemoveNoDraw()" },
		{ "trigger": "Interrupt", "contents": "Interrupt()" },
		{ "trigger": "GetCursorPosition", "contents": "GetCursorPosition()" },
		{ "trigger": "GetBaseAttackTime", "contents": "GetBaseAttackTime()" },
		{ "trigger": "GetDayTimeVisionRange", "contents": "GetDayTimeVisionRange()" },
		{ "trigger": "IsUnableToMiss", "contents": "IsUnableToMiss()" },
		{ "trigger": "HasAttackCapability", "contents": "HasAttackCapability()" },
		{ "trigger": "GetAttacksPerSecond", "contents": "GetAttacksPerSecond()" },
		{ "trigger": "GetBaseDamageMin", "contents": "GetBaseDamageMin()" },
		{ "trigger": "GetForceAttackTarget", "contents": "GetForceAttackTarget()" },
		{ "trigger": "IsCreature", "contents": "IsCreature()" },
		{ "trigger": "GetAttackTarget", "contents": "GetAttackTarget()" },
		{ "trigger": "GetDeathXP", "contents": "GetDeathXP()" },
		{ "trigger": "IsMagicImmune", "contents": "IsMagicImmune()" },
		{ "trigger": "GetAttackAnimationPoint", "contents": "GetAttackAnimationPoint()" },
		{ "trigger": "TimeUntilNextAttack", "contents": "TimeUntilNextAttack()" },
		{ "trigger": "AttackReady", "contents": "AttackReady()" },
		{ "trigger": "GetBaseHealthRegen", "contents": "GetBaseHealthRegen()" },
		{ "trigger": "GetTeamNumber", "contents": "GetTeamNumber()" },
		{ "trigger": "GetStatsBasedManaRegen", "contents": "GetStatsBasedManaRegen()" },
		{ "trigger": "GetUnitLabel", "contents": "GetUnitLabel()" },
		{ "trigger": "IsHardDisarmed", "contents": "IsHardDisarmed()" },
		{ "trigger": "GetMana", "contents": "GetMana()" },
		{ "trigger": "IsPhased", "contents": "IsPhased()" },
		{ "trigger": "GetProjectileSpeed", "contents": "GetProjectileSpeed()" },
		{ "trigger": "HasFlyingVision", "contents": "HasFlyingVision()" },
		{ "trigger": "HasMovementCapability", "contents": "HasMovementCapability()" },
		{ "trigger": "IsCommandRestricted", "contents": "IsCommandRestricted()" },
		{ "trigger": "HasGroundMovementCapability", "contents": "HasGroundMovementCapability()" },
		{ "trigger": "IsSoftDisarmed", "contents": "IsSoftDisarmed()" },
		{ "trigger": "GetMagicalArmorValue", "contents": "GetMagicalArmorValue()" },
		{ "trigger": "HasScepter", "contents": "HasScepter()" },
		{ "trigger": "IsMovementImpaired", "contents": "IsMovementImpaired()" },
		{ "trigger": "IsIdle", "contents": "IsIdle()" },
		{ "trigger": "IsRangedAttacker", "contents": "IsRangedAttacker()" },
		{ "trigger": "GetPercentageBasedManaRegen", "contents": "GetPercentageBasedManaRegen()" },
		{ "trigger": "NoTeamMoveTo", "contents": "NoTeamMoveTo()" },
		{ "trigger": "GetBaseDamageMax", "contents": "GetBaseDamageMax()" },
		{ "trigger": "GetTotalPurchasedUpgradeGoldCost", "contents": "GetTotalPurchasedUpgradeGoldCost()" },
		{ "trigger": "IsBlind", "contents": "IsBlind()" },
		{ "trigger": "IsDominated", "contents": "IsDominated()" },
		{ "trigger": "GetMustReachEachGoalEntity", "contents": "GetMustReachEachGoalEntity()" },
		{ "trigger": "PassivesDisabled", "contents": "PassivesDisabled()" },
		{ "trigger": "GetManaPercent", "contents": "GetManaPercent()" },
		{ "trigger": "IsStunned", "contents": "IsStunned()" },
		{ "trigger": "HasInventory", "contents": "HasInventory()" },
		{ "trigger": "MoveToNPCToGiveItem", "contents": "MoveToNPCToGiveItem(${1:handle npc}, ${2:handle item})" },
		{ "trigger": "NoHealthBar", "contents": "NoHealthBar()" },
		{ "trigger": "IsLowAttackPriority", "contents": "IsLowAttackPriority()" },
		{ "trigger": "NotOnMinimap", "contents": "NotOnMinimap()" },
		{ "trigger": "GetCursorCastTarget", "contents": "GetCursorCastTarget()" },
		{ "trigger": "IsInvisible", "contents": "IsInvisible()" },
		{ "trigger": "HasFlyMovementCapability", "contents": "HasFlyMovementCapability()" },
		{ "trigger": "IsSpeciallyDeniable", "contents": "IsSpeciallyDeniable()" },
		{ "trigger": "GetGoldBounty", "contents": "GetGoldBounty()" },
		{ "trigger": "AddNoDraw", "contents": "AddNoDraw()" },
		{ "trigger": "IsUnselectable", "contents": "IsUnselectable()" },
		{ "trigger": "GetBaseMoveSpeed", "contents": "GetBaseMoveSpeed()" },
		{ "trigger": "IsBlockDisabled", "contents": "IsBlockDisabled()" },
		{ "trigger": "IsNightmared", "contents": "IsNightmared()" },
		{ "trigger": "GetCursorTargetingNothing", "contents": "GetCursorTargetingNothing()" },
		{ "trigger": "GetHasteFactor", "contents": "GetHasteFactor()" },
		{ "trigger": "NoUnitCollision", "contents": "NoUnitCollision()" },
		{ "trigger": "IsHexed", "contents": "IsHexed()" },
		{ "trigger": "GetConstantBasedManaRegen", "contents": "GetConstantBasedManaRegen()" },
		{ "trigger": "GetLevel", "contents": "GetLevel()" },
		{ "trigger": "IsHero", "contents": "IsHero()" },
		{ "trigger": "IsSilenced", "contents": "IsSilenced()" },
		{ "trigger": "IsAttackImmune", "contents": "IsAttackImmune()" },
		{ "trigger": "IsDisarmed", "contents": "IsDisarmed()" },
		{ "trigger": "IsAttacking", "contents": "IsAttacking()" },
		{ "trigger": "ProvidesVision", "contents": "ProvidesVision()" },
		{ "trigger": "IsRooted", "contents": "IsRooted()" },
		{ "trigger": "TriggerModifierDodge", "contents": "TriggerModifierDodge()" },
		{ "trigger": "GetIdealSpeed", "contents": "GetIdealSpeed()" },
		{ "trigger": "MakeIllusion", "contents": "MakeIllusion()" },
		{ "trigger": "IsIllusion", "contents": "IsIllusion()" },
		{ "trigger": "GetSecondsPerAttack", "contents": "GetSecondsPerAttack()" },
		{ "trigger": "GetMaxHealth", "contents": "GetMaxHealth()" },
		{ "trigger": "GetBaseAttackRange", "contents": "GetBaseAttackRange()" },
		{ "trigger": "IsEvadeDisabled", "contents": "IsEvadeDisabled()" },
		{ "trigger": "GetMaxMana", "contents": "GetMaxMana()" },
		{ "trigger": "GetHealth", "contents": "GetHealth()" },
		{ "trigger": "GetMainControllingPlayer", "contents": "GetMainControllingPlayer()" },
		{ "trigger": "GetIncreasedAttackSpeed", "contents": "GetIncreasedAttackSpeed()" },
		{ "trigger": "IsPhantom", "contents": "IsPhantom()" },
		{ "trigger": "Hold", "contents": "Hold()" },
		{ "trigger": "IsNeutralUnitType", "contents": "IsNeutralUnitType()" },
		{ "trigger": "GetBaseMagicalResistanceValue", "contents": "GetBaseMagicalResistanceValue()" },
		{ "trigger": "GetCollisionPadding", "contents": "GetCollisionPadding()" },
		{ "trigger": "IsAlive", "contents": "IsAlive()" },
		{ "trigger": "NoTeamSelect", "contents": "NoTeamSelect()" },
		{ "trigger": "CastAbilityOnTarget", "contents": "CastAbilityOnTarget(${1:handle target}, ${2:handle ability}, ${3:int playerIndex})" },
		{ "trigger": "GetPlayerOwner", "contents": "GetPlayerOwner()" },
		{ "trigger": "IsSummoned", "contents": "IsSummoned()" },
		{ "trigger": "IsTower", "contents": "IsTower()" },
		{ "trigger": "GetBaseMaxHealth", "contents": "GetBaseMaxHealth()" },
		{ "trigger": "GetHealthDeficit", "contents": "GetHealthDeficit()" },
		{ "trigger": "GetAcquisitionRange", "contents": "GetAcquisitionRange()" },
		{ "trigger": "GetLastIdleChangeTime", "contents": "GetLastIdleChangeTime()" },
		{ "trigger": "CastAbilityNoTarget", "contents": "CastAbilityNoTarget(${1:handle ability}, ${2:int playerIndex})" },
		{ "trigger": "GetCurrentVisionRange", "contents": "GetCurrentVisionRange()" },
		{ "trigger": "IsOwnedByAnyPlayer", "contents": "IsOwnedByAnyPlayer()" },
		{ "trigger": "GetPhysicalArmorBaseValue", "contents": "GetPhysicalArmorBaseValue()" },
		{ "trigger": "GetCurrentActiveAbility", "contents": "GetCurrentActiveAbility()" },
		{ "trigger": "IsControllableByAnyPlayer", "contents": "IsControllableByAnyPlayer()" },
		{ "trigger": "GetPhysicalArmorValue", "contents": "GetPhysicalArmorValue()" },
		{ "trigger": "BoundingRadius2D", "contents": "BoundingRadius2D()" },
		{ "trigger": "GetPhysicalArmorValue", "contents": "GetPhysicalArmorValue()" },
		{ "trigger": "GetDenies", "contents": "GetDenies()" },
		{ "trigger": "GetIntellect", "contents": "GetIntellect()" },
		{ "trigger": "ShouldDoFlyHeightVisual", "contents": "ShouldDoFlyHeightVisual()" },
		{ "trigger": "GetPlayerID", "contents": "GetPlayerID()" },
		{ "trigger": "GetLastHits", "contents": "GetLastHits()" },
		{ "trigger": "GetBaseAgility", "contents": "GetBaseAgility()" },
		{ "trigger": "IsReincarnating", "contents": "IsReincarnating()" },
		{ "trigger": "IncrementLastHitMultikill", "contents": "IncrementLastHitMultikill()" },
		{ "trigger": "GetBaseStrength", "contents": "GetBaseStrength()" },
		{ "trigger": "GetDeathGoldCost", "contents": "GetDeathGoldCost()" },
		{ "trigger": "GetManaRegen", "contents": "GetManaRegen()" },
		{ "trigger": "ClearLastHitMultikill", "contents": "ClearLastHitMultikill()" },
		{ "trigger": "ModifyGold", "contents": "ModifyGold(${1:int goldAmmt}, ${2:bool reliable}, ${3:int reason})" },
		{ "trigger": "GetPrimaryStatValue", "contents": "GetPrimaryStatValue()" },
		{ "trigger": "ClearStreak", "contents": "ClearStreak()" },
		{ "trigger": "GetAgility", "contents": "GetAgility()" },
		{ "trigger": "CalculateStatBonus", "contents": "CalculateStatBonus()" },
		{ "trigger": "GetBuybackCooldownTime", "contents": "GetBuybackCooldownTime()" },
		{ "trigger": "GetGoldBounty", "contents": "GetGoldBounty()" },
		{ "trigger": "GetHealthRegen", "contents": "GetHealthRegen()" },
		{ "trigger": "IncrementStreak", "contents": "IncrementStreak()" },
		{ "trigger": "IsBuybackDisabledByReapersScythe", "contents": "IsBuybackDisabledByReapersScythe()" },
		{ "trigger": "GetBuybackCost", "contents": "GetBuybackCost()" },
		{ "trigger": "CanEarnGold", "contents": "CanEarnGold()" },
		{ "trigger": "GetStrength", "contents": "GetStrength()" },
		{ "trigger": "GetAgilityGain", "contents": "GetAgilityGain()" },
		{ "trigger": "GetNumAttackers", "contents": "GetNumAttackers()" },
		{ "trigger": "GetCurrentXP", "contents": "GetCurrentXP()" },
		{ "trigger": "SpendGold", "contents": "SpendGold(${1:int amount}, ${2:int reason})" },
		{ "trigger": "UnitCanRespawn", "contents": "UnitCanRespawn()" },
		{ "trigger": "GetGold", "contents": "GetGold()" },
		{ "trigger": "PerformTaunt", "contents": "PerformTaunt()" },
		{ "trigger": "SetGold", "contents": "SetGold(${1:int amount}, ${2:bool reliableGold})" },
		{ "trigger": "HasAnyAvailableInventorySpace", "contents": "HasAnyAvailableInventorySpace()" },
		{ "trigger": "GetAbilityPoints", "contents": "GetAbilityPoints()" },
		{ "trigger": "GetAssists", "contents": "GetAssists()" },
		{ "trigger": "GetDeaths", "contents": "GetDeaths()" },
		{ "trigger": "GetTimeUntilRespawn", "contents": "GetTimeUntilRespawn()" },
		{ "trigger": "IncrementKills", "contents": "IncrementKills(${1:int kills})" },
		{ "trigger": "GetPrimaryAttribute", "contents": "GetPrimaryAttribute()" },
		{ "trigger": "IncrementAssists", "contents": "IncrementAssists()" },
		{ "trigger": "HasFlyingVision", "contents": "HasFlyingVision()" },
		{ "trigger": "GetKills", "contents": "GetKills()" },
		{ "trigger": "GetIncreasedAttackSpeed", "contents": "GetIncreasedAttackSpeed()" },
		{ "trigger": "IncrementLastHitStreak", "contents": "IncrementLastHitStreak()" },
		{ "trigger": "HasOwnerAbandoned", "contents": "HasOwnerAbandoned()" },
		{ "trigger": "WillReincarnate", "contents": "WillReincarnate()" },
		{ "trigger": "GetMultipleKillCount", "contents": "GetMultipleKillCount()" },
		{ "trigger": "RecordLastHit", "contents": "RecordLastHit()" },
		{ "trigger": "IncrementLastHits", "contents": "IncrementLastHits()" },
		{ "trigger": "GetStatsBasedManaRegen", "contents": "GetStatsBasedManaRegen()" },
		{ "trigger": "GetBuybackGoldLimitTime", "contents": "GetBuybackGoldLimitTime()" },
		{ "trigger": "GetBaseDamageMax", "contents": "GetBaseDamageMax()" },
		{ "trigger": "GetBaseDamageMin", "contents": "GetBaseDamageMin()" },
		{ "trigger": "GetStreak", "contents": "GetStreak()" },
		{ "trigger": "GetMostRecentDamageTime", "contents": "GetMostRecentDamageTime()" },
		{ "trigger": "Buyback", "contents": "Buyback()" },
		{ "trigger": "GetStrengthGain", "contents": "GetStrengthGain()" },
		{ "trigger": "GetRespawnTime", "contents": "GetRespawnTime()" },
		{ "trigger": "GetIntellectGain", "contents": "GetIntellectGain()" },
		{ "trigger": "ClearLastHitStreak", "contents": "ClearLastHitStreak()" },
		{ "trigger": "IncrementNearbyCreepDeaths", "contents": "IncrementNearbyCreepDeaths()" },
		{ "trigger": "GetBaseIntellect", "contents": "GetBaseIntellect()" },
		{ "trigger": "GetBonusDamageFromPrimaryStat", "contents": "GetBonusDamageFromPrimaryStat()" },
		{ "trigger": "IncrementDenies", "contents": "IncrementDenies()" },
		{ "trigger": "IsChampion", "contents": "IsChampion()" },
		{ "trigger": "GetInvulnCount", "contents": "GetInvulnCount()" },
		{ "trigger": "SetCustomHeroMaxLevel", "contents": "SetCustomHeroMaxLevel(${1:int maxLevel})" },
		{ "trigger": "ClientLoadGridNav", "contents": "ClientLoadGridNav()" },
		{ "trigger": "SetOverrideSelectionEntity", "contents": "SetOverrideSelectionEntity(${1:handle unit})" },
		{ "trigger": "CompleteQuest", "contents": "CompleteQuest()" },
		{ "trigger": "CompleteSubquest", "contents": "CompleteSubquest()" },
		{ "trigger": "ForceSpawn", "contents": "ForceSpawn()" },
		{ "trigger": "GetSpawnedEntities", "contents": "GetSpawnedEntities()" },
		{ "trigger": "DeleteCreatedSpawnGroups", "contents": "DeleteCreatedSpawnGroups()" },
		{ "trigger": "SetVelocity", "contents": "SetVelocity(${1:Vector velocity})" },
		{ "trigger": "IsAttachedToParent", "contents": "IsAttachedToParent()" },
		{ "trigger": "DetachFromParent", "contents": "DetachFromParent()" },
		{ "trigger": "GetSequence", "contents": "GetSequence()" },
		{ "trigger": "IsSequenceFinished", "contents": "IsSequenceFinished()" },
		{ "trigger": "SetModelScale", "contents": "SetModelScale(${1:float scale})" },
		{ "trigger": "GetEquippedWeapons", "contents": "GetEquippedWeapons()" },
		{ "trigger": "GetWeaponCount", "contents": "GetWeaponCount()" },
		{ "trigger": "CreateLinearProjectile", "contents": "CreateLinearProjectile(${1:table infoTable})" },
		{ "trigger": "Enable", "contents": "Enable()" },
		{ "trigger": "Disable", "contents": "Disable()" },
		{ "trigger": "SpawnEntity", "contents": "SpawnEntity()" },
		{ "trigger": "SetParticleControl", "contents": "SetParticleControl(${1:int particleId}, ${2:int controlIndex}, ${3:Vector controlData})" },
		{ "trigger": "CreateParticleForPlayer", "contents": "CreateParticleForPlayer(${1:string particleName}, ${2:int particleAttach}, ${3:handle owningEntity}, ${4:handle owningPlayer})" },
		{ "trigger": "ReleaseParticleIndex", "contents": "ReleaseParticleIndex(${1:int particleId})" },
		{ "trigger": "CreateParticle", "contents": "CreateParticle(${1:string particleName}, ${2:int particleAttach}, ${3:handle owningEntity})" },
		{ "trigger": "GetHero", "contents": "GetHero(${1:int heroId})" },
		{ "trigger": "GetAllHeroes", "contents": "GetAllHeroes()" },
		{ "trigger": "GetHeroCount", "contents": "GetHeroCount()" },
		{ "trigger": "DisableMotion", "contents": "DisableMotion()" },
		{ "trigger": "EnableMotion", "contents": "EnableMotion()" },
		{ "trigger": "SetPostGameTime", "contents": "SetPostGameTime(${1:float time})" },
		{ "trigger": "State_Get", "contents": "State_Get()" },
		{ "trigger": "MakeTeamLose", "contents": "MakeTeamLose(${1:int team})" },
		{ "trigger": "Defeated", "contents": "Defeated()" },
		{ "trigger": "ResetToHeroSelection", "contents": "ResetToHeroSelection()" },
		{ "trigger": "SendCustomMessage", "contents": "SendCustomMessage(${1:string message}, ${2:int teamID}, ${3:int unknown(1?)})" },
		{ "trigger": "SetCreepMinimapIconScale", "contents": "SetCreepMinimapIconScale(${1:float scale})" },
		{ "trigger": "GetNianFightStartTime", "contents": "GetNianFightStartTime()" },
		{ "trigger": "NumDroppedItems", "contents": "NumDroppedItems()" },
		{ "trigger": "GetMatchSignoutComplete", "contents": "GetMatchSignoutComplete()" },
		{ "trigger": "GetDifficulty", "contents": "GetDifficulty()" },
		{ "trigger": "ResetDefeated", "contents": "ResetDefeated()" },
		{ "trigger": "GetNianTotalDamageTaken", "contents": "GetNianTotalDamageTaken()" },
		{ "trigger": "SetHeroRespawnEnabled", "contents": "SetHeroRespawnEnabled(${1:bool canRespawn})" },
		{ "trigger": "SetGameWinner", "contents": "SetGameWinner(${1:int team})" },
		{ "trigger": "SetHeroSelectionTime", "contents": "SetHeroSelectionTime(${1:float time})" },
		{ "trigger": "SetUseUniversalShopMode", "contents": "SetUseUniversalShopMode(${1:bool enabled})" },
		{ "trigger": "Playtesting_UpdateAddOnKeyValues", "contents": "Playtesting_UpdateAddOnKeyValues()" },
		{ "trigger": "IsDaytime", "contents": "IsDaytime()" },
		{ "trigger": "GetDroppedItem", "contents": "GetDroppedItem(${1:int dropIndex})" },
		{ "trigger": "SetTreeRegrowTime", "contents": "SetTreeRegrowTime(${1:float time})" },
		{ "trigger": "GetGameModeEntity", "contents": "GetGameModeEntity()" },
		{ "trigger": "DidMatchSignoutTimeOut", "contents": "DidMatchSignoutTimeOut()" },
		{ "trigger": "SetTimeOfDay", "contents": "SetTimeOfDay(${1:float time})" },
		{ "trigger": "GetCustomGameDifficulty", "contents": "GetCustomGameDifficulty()" },
		{ "trigger": "SetOverlayHealthBarUnit", "contents": "SetOverlayHealthBarUnit(${1:handle unit}, ${2:int style})" },
		{ "trigger": "SetSameHeroSelectionEnabled", "contents": "SetSameHeroSelectionEnabled(${1:bool enabled})" },
		{ "trigger": "SetPreGameTime", "contents": "SetPreGameTime(${1:float time})" },
		{ "trigger": "GetGameTime", "contents": "GetGameTime()" },
		{ "trigger": "SetRuneSpawnTime", "contents": "SetRuneSpawnTime(${1:float time})" },
		{ "trigger": "SetHeroMinimapIconScale", "contents": "SetHeroMinimapIconScale(${1:int iconSize})" },
		{ "trigger": "SetSafeToLeave", "contents": "SetSafeToLeave(${1:bool safeToLeave})" },
		{ "trigger": "GetTimeOfDay", "contents": "GetTimeOfDay()" },
		{ "trigger": "SetRuneMinimapIconScale", "contents": "SetRuneMinimapIconScale(${1:float scale})" },
		{ "trigger": "GetMinExposure", "contents": "GetMinExposure()" },
		{ "trigger": "GetMaxExposure", "contents": "GetMaxExposure()" },
		{ "trigger": "GetBloomScale", "contents": "GetBloomScale()" },
		{ "trigger": "PopDebugOverlayScope", "contents": "PopDebugOverlayScope()" },
		{ "trigger": "UnitTestCycleOverlayRenderType", "contents": "UnitTestCycleOverlayRenderType()" },
		{ "trigger": "GetCurrentScene", "contents": "GetCurrentScene()" },
		{ "trigger": "IsPaused", "contents": "IsPaused()" },
		{ "trigger": "EstimateLength", "contents": "EstimateLength()" },
		{ "trigger": "FindCamera", "contents": "FindCamera()" },
		{ "trigger": "Cancel", "contents": "Cancel()" },
		{ "trigger": "IsPlayingBack", "contents": "IsPlayingBack()" },
		{ "trigger": "RegrowAllTrees", "contents": "RegrowAllTrees()" },
		{ "trigger": "GetFloat", "contents": "GetFloat(${1:string name})" },
		{ "trigger": "GetStr", "contents": "GetStr(${1:string variableName})" },
		{ "trigger": "RegisterCommand", "contents": "RegisterCommand(${1:string variableName}, ${2:handle function}, ${3:string helpText}, ${4:int flags})" },
		{ "trigger": "GetDOTACommandClient", "contents": "GetDOTACommandClient()" },
		{ "trigger": "GetCommandClient", "contents": "GetCommandClient()" },
		{ "trigger": "SetFloat", "contents": "SetFloat(${1:string variableName}, ${2:float value})" },
		{ "trigger": "RegisterConvar", "contents": "RegisterConvar(${1:string name}, ${2:string defaultValue}, ${3:string helpText}, ${4:int flags})" },
		{ "trigger": "GetBool", "contents": "GetBool(${1:string variableName})" },
		{ "trigger": "SetBool", "contents": "SetBool(${1:string variableName}, ${2:bool value})" },
		{ "trigger": "__add", "contents": "__add(${1:Vector a}, ${2:Vector b})" },
		{ "trigger": "__sub", "contents": "__sub(${1:Vector a}, ${2:Vector b})" },
		{ "trigger": "__div", "contents": "__div(${1:Vector a}, ${2:Vector b})" },
		{ "trigger": "__eq", "contents": "__eq(${1:Vector a}, ${2:Vector b})" },
		{ "trigger": "__tostring", "contents": "__tostring()" },
		{ "trigger": "__len", "contents": "__len()" },
		{ "trigger": "__mul", "contents": "__mul(${1:Vector a}, ${2:Vector b})" },
		{ "trigger": "Cross", "contents": "Cross(${1:Vector a}, ${2:Vector b})" },
		{ "trigger": "Dot", "contents": "Dot(${1:Vector a}, ${2:Vector b})" },
		{ "trigger": "Length", "contents": "Length()" },
		{ "trigger": "__unm", "contents": "__unm()" },
		{ "trigger": "Length2D", "contents": "Length2D()" },
		{ "trigger": "Normalized", "contents": "Normalized()" },
		{ "trigger": "DebugDrawBox", "contents": "DebugDrawBox(${1:Vector origin}, ${2:Vector min}, ${3:Vector max}, ${4:int r}, ${5:int g}, ${6:int b}, ${7:int a}, ${8:float duration})" },
		{ "trigger": "Heal", "contents": "Heal(${1:float amount}, ${2:handle source})" },
		{ "trigger": "DestroyParticle", "contents": "DestroyParticle(${1:int particleID}, ${2:bool immediately})" },
		{ "trigger": "SetAnnouncerDisabled", "contents": "SetAnnouncerDisabled(${1:bool enabled})" },
		{ "trigger": "SetFixedRespawnTime", "contents": "SetFixedRespawnTime(${1:float time})" },
		{ "trigger": "IsEnabled", "contents": "IsEnabled()" },
		{ "trigger": "CutDown", "contents": "CutDown(${1:int TeamNumberKnownTo })" },
		{ "trigger": "CutDownRegrowAfter", "contents": "CutDownRegrowAfter(${1:float RegrowAfter}, ${2:int TeamNumberKnownTo })" },
		{ "trigger": "GrowBack", "contents": "GrowBack()" },
		{ "trigger": "IsStanding", "contents": "IsStanding()" },
		{ "trigger": "CreateHeroForPlayer", "contents": "CreateHeroForPlayer(${1:string unitName}, ${2:handle player})" },
		{ "trigger": "PrecacheResource", "contents": "PrecacheResource(${1:string precacheMode}, ${2:string resource}, ${3:handle context})" },
		{ "trigger": "UTIL_MessageTextAll", "contents": "UTIL_MessageTextAll(${1:string message}, ${2:int r}, ${3:int g}, ${4:int b}, ${5:int a})" },
		{ "trigger": "UTIL_MessageTextAll_WithContext", "contents": "UTIL_MessageTextAll_WithContext(${1:string message}, ${2:int r}, ${3:int g}, ${4:int b}, ${5:int a}, ${6:table context})" },
		{ "trigger": "GetCustomTeamAssignment", "contents": "GetCustomTeamAssignment(${1:int playerIndex})" },
		{ "trigger": "SetCustomTeamAssignment", "contents": "SetCustomTeamAssignment(${1:int playerIndex}, ${2:int teamToJoin})" },
		{ "trigger": "SetCustomGameEndDelay", "contents": "SetCustomGameEndDelay(${1:float delay})" },
		{ "trigger": "SetCustomVictoryMessageDuration", "contents": "SetCustomVictoryMessageDuration(${1:float duration})" },
		{ "trigger": "SetHideKillMessageHeaders", "contents": "SetHideKillMessageHeaders(${1:bool hide})" },
		{ "trigger": "GetTeamName", "contents": "GetTeamName(${1:int teamNumber})" },
		{ "trigger": "ShowCustomHeaderMessage", "contents": "ShowCustomHeaderMessage(${1:string message}, ${2:int player}, ${3:int value}, ${4:float time})" },
		{ "trigger": "UTIL_MessageText", "contents": "UTIL_MessageText(${1:int playerId}, ${2:string message}, ${3:int r}, ${4:int g}, ${5:int b}, ${6:int a})" },
		{ "trigger": "UTIL_MessageText_WithContext", "contents": "UTIL_MessageText_WithContext(${1:int playerId}, ${2:string message}, ${3:int r}, ${4:int g}, ${5:int b}, ${6:int a}, ${7:table context})" },
		{ "trigger": "UTIL_ResetMessageText", "contents": "UTIL_ResetMessageText(${1:int playerId})" },
		{ "trigger": "UTIL_ResetMessageTextAll", "contents": "UTIL_ResetMessageTextAll()" },
		{ "trigger": "GetAttackCapability", "contents": "GetAttackCapability()" },
		{ "trigger": "AddFOWViewer", "contents": "AddFOWViewer(${1:int int_1}, ${2:Vector Vector_2}, ${3:float float_3}, ${4:float float_4}, ${5:bool bool_5})" },
		{ "trigger": "CalcClosestPointOnEntityOBB", "contents": "CalcClosestPointOnEntityOBB(${1:handle handle_1}, ${2:Vector Vector_2})" },
		{ "trigger": "CalcDistanceBetweenEntityOBB", "contents": "CalcDistanceBetweenEntityOBB(${1:handle handle_1}, ${2:handle handle_2})" },
		{ "trigger": "ClearTeamCustomHealthbarColor", "contents": "ClearTeamCustomHealthbarColor(${1:int int_1})" },
		{ "trigger": "CreateItemOnPositionForLaunch", "contents": "CreateItemOnPositionForLaunch(${1:Vector Vector_1}, ${2:handle handle_2})" },
		{ "trigger": "CreateModifierThinker", "contents": "CreateModifierThinker(${1:handle handle_1}, ${2:handle handle_2}, ${3:string string_3}, ${4:handle handle_4}, ${5:Vector Vector_5}, ${6:int int_6}, ${7:bool bool_7})" },
		{ "trigger": "CreateTempTree", "contents": "CreateTempTree(${1:Vector Vector_1}, ${2:float float_2})" },
		{ "trigger": "CreateUnitFromTable", "contents": "CreateUnitFromTable(${1:handle handle_1}, ${2:Vector Vector_2})" },
		{ "trigger": "DoCleaveAttack", "contents": "DoCleaveAttack(${1:handle handle_1}, ${2:handle handle_2}, ${3:handle handle_3}, ${4:float float_4}, ${5:float float_5}, ${6:string string_6})" },
		{ "trigger": "EmitSoundOnLocationForAllies", "contents": "EmitSoundOnLocationForAllies(${1:Vector Vector_1}, ${2:string string_2}, ${3:handle handle_3})" },
		{ "trigger": "EmitSoundOnLocationWithCaster", "contents": "EmitSoundOnLocationWithCaster(${1:Vector Vector_1}, ${2:string string_2}, ${3:handle handle_3})" },
		{ "trigger": "GetGroundHeight", "contents": "GetGroundHeight(${1:Vector Vector_1}, ${2:handle handle_2})" },
		{ "trigger": "GetItemCost", "contents": "GetItemCost(${1:string string_1})" },
		{ "trigger": "GetTeamHeroKills", "contents": "GetTeamHeroKills(${1:int int_1})" },
		{ "trigger": "IsServer", "contents": "IsServer()" },
		{ "trigger": "LimitPathingSearchDepth", "contents": "LimitPathingSearchDepth(${1:float float_1})" },
		{ "trigger": "LinkLuaModifier", "contents": "LinkLuaModifier(${1:string string_1}, ${2:int int_2})" },
		{ "trigger": "MinimapEvent", "contents": "MinimapEvent(${1:int int_1}, ${2:handle handle_2}, ${3:int int_3}, ${4:int int_4}, ${5:int int_5}, ${6:int int_6})" },
		{ "trigger": "ResolveNPCPositions", "contents": "ResolveNPCPositions(${1:Vector Vector_1}, ${2:float float_2})" },
		{ "trigger": "SendOverheadEventMessage", "contents": "SendOverheadEventMessage(${1:handle handle_1}, ${2:int int_2}, ${3:handle handle_3}, ${4:int int_4}, ${5:handle handle_5})" },
		{ "trigger": "SetTeamCustomHealthbarColor", "contents": "SetTeamCustomHealthbarColor(${1:int int_1}, ${2:int int_2}, ${3:int int_3}, ${4:int int_4})" },
		{ "trigger": "StartSoundEventFromPosition", "contents": "StartSoundEventFromPosition(${1:string string_1}, ${2:Vector Vector_2})" },
		{ "trigger": "StartSoundEventFromPositionReliable", "contents": "StartSoundEventFromPositionReliable(${1:string string_1}, ${2:Vector Vector_2})" },
		{ "trigger": "StartSoundEventFromPositionUnreliable", "contents": "StartSoundEventFromPositionUnreliable(${1:string string_1}, ${2:Vector Vector_2})" },
		{ "trigger": "StartSoundEventReliable", "contents": "StartSoundEventReliable(${1:string string_1}, ${2:handle handle_2})" },
		{ "trigger": "StartSoundEventUnreliable", "contents": "StartSoundEventUnreliable(${1:string string_1}, ${2:handle handle_2})" },
		{ "trigger": "UnitFilter", "contents": "UnitFilter(${1:handle handle_1}, ${2:int int_2}, ${3:int int_3}, ${4:int int_4}, ${5:int int_5})" },
		{ "trigger": "GetModelScale", "contents": "GetModelScale()" },
		{ "trigger": "ShootPosition", "contents": "ShootPosition(${1:int nHand})" },
		{ "trigger": "AddEffects", "contents": "AddEffects(${1:int nFlags})" },
		{ "trigger": "Attribute_GetFloatValue", "contents": "Attribute_GetFloatValue(${1:string pName}, ${2:float flDefault})" },
		{ "trigger": "Attribute_GetIntValue", "contents": "Attribute_GetIntValue(${1:string pName}, ${2:int nDefault})" },
		{ "trigger": "Attribute_SetFloatValue", "contents": "Attribute_SetFloatValue(${1:string pName}, ${2:float flValue})" },
		{ "trigger": "Attribute_SetIntValue", "contents": "Attribute_SetIntValue(${1:string pName}, ${2:int nValue})" },
		{ "trigger": "DeleteAttribute", "contents": "DeleteAttribute(${1:string pName})" },
		{ "trigger": "GetTeamNumber", "contents": "GetTeamNumber()" },
		{ "trigger": "HasAttribute", "contents": "HasAttribute(${1:string pName})" },
		{ "trigger": "RemoveEffects", "contents": "RemoveEffects(${1:int nFlags})" },
		{ "trigger": "SetConstraint", "contents": "SetConstraint(${1:Vector vPos})" },
		{ "trigger": "SetLightGroup", "contents": "SetLightGroup(${1:string pLightGroup})" },
		{ "trigger": "SetModel", "contents": "SetModel(${1:string pModelName})" },
		{ "trigger": "SetRenderColor", "contents": "SetRenderColor(${1:int r}, ${2:int g}, ${3:int b})" },
		{ "trigger": "SetRenderMode", "contents": "SetRenderMode(${1:int nMode})" },
		{ "trigger": "SetSize", "contents": "SetSize(${1:Vector mins}, ${2:Vector maxs})" },
		{ "trigger": "GetHMDAvatar", "contents": "GetHMDAvatar()" },
		{ "trigger": "IsSteamControllerButtonPressed", "contents": "IsSteamControllerButtonPressed(${1:int nControllerNumber}, ${2:int nButton})" },
		{ "trigger": "IsUsePressed", "contents": "IsUsePressed()" },
		{ "trigger": "IsVRControllerButtonPressed", "contents": "IsVRControllerButtonPressed(${1:int nButton})" },
		{ "trigger": "Quit", "contents": "Quit()" },
		{ "trigger": "RegisterListener", "contents": "RegisterListener(${1:string string_1}, ${2:handle handle_2})" },
		{ "trigger": "Send_ServerToAllClients", "contents": "Send_ServerToAllClients(${1:string string_1}, ${2:handle handle_2})" },
		{ "trigger": "Send_ServerToPlayer", "contents": "Send_ServerToPlayer(${1:handle handle_1}, ${2:string string_2}, ${3:handle handle_3})" },
		{ "trigger": "Send_ServerToTeam", "contents": "Send_ServerToTeam(${1:int int_1}, ${2:string string_2}, ${3:handle handle_3})" },
		{ "trigger": "UnregisterListener", "contents": "UnregisterListener(${1:int int_1})" },
		{ "trigger": "GetTableValue", "contents": "GetTableValue(${1:string string_1}, ${2:string string_2})" },
		{ "trigger": "SetTableValue", "contents": "SetTableValue(${1:string string_1}, ${2:string string_2}, ${3:handle handle_3})" },
		{ "trigger": "GetCastRange", "contents": "GetCastRange(${1:Vector vLocation}, ${2:handle hTarget})" },
		{ "trigger": "IsCosmetic", "contents": "IsCosmetic(${1:handle hEntity})" },
		{ "trigger": "OnAbilityPinged", "contents": "OnAbilityPinged(${1:int nPlayerID})" },
		{ "trigger": "UpgradeAbility", "contents": "UpgradeAbility(${1:bool bSupressSpeech})" },
		{ "trigger": "ClearBountyRunePickupFilter", "contents": "ClearBountyRunePickupFilter()" },
		{ "trigger": "ClearDamageFilter", "contents": "ClearDamageFilter()" },
		{ "trigger": "ClearExecuteOrderFilter", "contents": "ClearExecuteOrderFilter()" },
		{ "trigger": "ClearModifyExperienceFilter", "contents": "ClearModifyExperienceFilter()" },
		{ "trigger": "ClearModifyGoldFilter", "contents": "ClearModifyGoldFilter()" },
		{ "trigger": "ClearRuneSpawnFilter", "contents": "ClearRuneSpawnFilter()" },
		{ "trigger": "ClearTrackingProjectileFilter", "contents": "ClearTrackingProjectileFilter()" },
		{ "trigger": "GetAlwaysShowPlayerInventory", "contents": "GetAlwaysShowPlayerInventory()" },
		{ "trigger": "GetAnnouncerDisabled", "contents": "GetAnnouncerDisabled()" },
		{ "trigger": "GetCameraDistanceOverride", "contents": "GetCameraDistanceOverride()" },
		{ "trigger": "GetCustomBuybackCooldownEnabled", "contents": "GetCustomBuybackCooldownEnabled()" },
		{ "trigger": "GetCustomBuybackCostEnabled", "contents": "GetCustomBuybackCostEnabled()" },
		{ "trigger": "GetCustomHeroMaxLevel", "contents": "GetCustomHeroMaxLevel()" },
		{ "trigger": "GetFixedRespawnTime", "contents": "GetFixedRespawnTime()" },
		{ "trigger": "GetFogOfWarDisabled", "contents": "GetFogOfWarDisabled()" },
		{ "trigger": "GetGoldSoundDisabled", "contents": "GetGoldSoundDisabled()" },
		{ "trigger": "GetMaximumAttackSpeed", "contents": "GetMaximumAttackSpeed()" },
		{ "trigger": "GetMinimumAttackSpeed", "contents": "GetMinimumAttackSpeed()" },
		{ "trigger": "GetRecommendedItemsDisabled", "contents": "GetRecommendedItemsDisabled()" },
		{ "trigger": "GetStashPurchasingDisabled", "contents": "GetStashPurchasingDisabled()" },
		{ "trigger": "GetTopBarTeamValuesOverride", "contents": "GetTopBarTeamValuesOverride()" },
		{ "trigger": "GetTopBarTeamValuesVisible", "contents": "GetTopBarTeamValuesVisible()" },
		{ "trigger": "GetTowerBackdoorProtectionEnabled", "contents": "GetTowerBackdoorProtectionEnabled()" },
		{ "trigger": "GetUseCustomHeroLevels", "contents": "GetUseCustomHeroLevels()" },
		{ "trigger": "IsBuybackEnabled", "contents": "IsBuybackEnabled()" },
		{ "trigger": "SetBotsAlwaysPushWithHuman", "contents": "SetBotsAlwaysPushWithHuman(${1:bool bAlwaysPush})" },
		{ "trigger": "SetBotsInLateGame", "contents": "SetBotsInLateGame(${1:bool bLateGame})" },
		{ "trigger": "SetBotsMaxPushTier", "contents": "SetBotsMaxPushTier(${1:int nMaxTier})" },
		{ "trigger": "SetBountyRunePickupFilter", "contents": "SetBountyRunePickupFilter(${1:handle hFunction}, ${2:handle hContext})" },
		{ "trigger": "SetCustomGameForceHero", "contents": "SetCustomGameForceHero(${1:string pHeroName})" },
		{ "trigger": "SetDamageFilter", "contents": "SetDamageFilter(${1:handle hFunction}, ${2:handle hContext})" },
		{ "trigger": "SetExecuteOrderFilter", "contents": "SetExecuteOrderFilter(${1:handle hFunction}, ${2:handle hContext})" },
		{ "trigger": "SetFountainConstantManaRegen", "contents": "SetFountainConstantManaRegen(${1:float flConstantManaRegen})" },
		{ "trigger": "SetFountainPercentageHealthRegen", "contents": "SetFountainPercentageHealthRegen(${1:float flPercentageHealthRegen})" },
		{ "trigger": "SetFountainPercentageManaRegen", "contents": "SetFountainPercentageManaRegen(${1:float flPercentageManaRegen})" },
		{ "trigger": "SetHUDVisible", "contents": "SetHUDVisible(${1:int iHUDElement}, ${2:bool bVisible})" },
		{ "trigger": "SetLoseGoldOnDeath", "contents": "SetLoseGoldOnDeath(${1:bool bEnabled})" },
		{ "trigger": "SetMaximumAttackSpeed", "contents": "SetMaximumAttackSpeed(${1:int nMaxSpeed})" },
		{ "trigger": "SetMinimumAttackSpeed", "contents": "SetMinimumAttackSpeed(${1:int nMinSpeed})" },
		{ "trigger": "SetModifyExperienceFilter", "contents": "SetModifyExperienceFilter(${1:handle hFunction}, ${2:handle hContext})" },
		{ "trigger": "SetModifyGoldFilter", "contents": "SetModifyGoldFilter(${1:handle hFunction}, ${2:handle hContext})" },
		{ "trigger": "SetRuneEnabled", "contents": "SetRuneEnabled(${1:int nRune}, ${2:bool bEnabled})" },
		{ "trigger": "SetRuneSpawnFilter", "contents": "SetRuneSpawnFilter(${1:handle hFunction}, ${2:handle hContext})" },
		{ "trigger": "SetStashPurchasingDisabled", "contents": "SetStashPurchasingDisabled(${1:bool bDisabled})" },
		{ "trigger": "SetTrackingProjectileFilter", "contents": "SetTrackingProjectileFilter(${1:handle hFunction}, ${2:handle hContext})" },
		{ "trigger": "AddMinimapDebugPoint", "contents": "AddMinimapDebugPoint(${1:int int_1}, ${2:Vector Vector_2}, ${3:int int_3}, ${4:int int_4}, ${5:int int_5}, ${6:int int_6}, ${7:float float_7})" },
		{ "trigger": "AddMinimapDebugPointForTeam", "contents": "AddMinimapDebugPointForTeam(${1:int int_1}, ${2:Vector Vector_2}, ${3:int int_3}, ${4:int int_4}, ${5:int int_5}, ${6:int int_6}, ${7:float float_7}, ${8:int int_8})" },
		{ "trigger": "EnableCustomGameSetupAutoLaunch", "contents": "EnableCustomGameSetupAutoLaunch(${1:bool bool_1})" },
		{ "trigger": "FinishCustomGameSetup", "contents": "FinishCustomGameSetup()" },
		{ "trigger": "GetCustomGameTeamMaxPlayers", "contents": "GetCustomGameTeamMaxPlayers(${1:int int_1})" },
		{ "trigger": "GetDOTATime", "contents": "GetDOTATime(${1:bool bool_1}, ${2:bool bool_2})" },
		{ "trigger": "GetGameSessionConfigValue", "contents": "GetGameSessionConfigValue(${1:string string_1}, ${2:string string_2})" },
		{ "trigger": "IsGamePaused", "contents": "IsGamePaused()" },
		{ "trigger": "LockCustomGameSetupTeamAssignment", "contents": "LockCustomGameSetupTeamAssignment(${1:bool bool_1})" },
		{ "trigger": "SetCustomGameSetupAutoLaunchDelay", "contents": "SetCustomGameSetupAutoLaunchDelay(${1:float float_1})" },
		{ "trigger": "SetCustomGameSetupRemainingTime", "contents": "SetCustomGameSetupRemainingTime(${1:float float_1})" },
		{ "trigger": "SetCustomGameSetupTimeout", "contents": "SetCustomGameSetupTimeout(${1:float float_1})" },
		{ "trigger": "SetCustomGameTeamMaxPlayers", "contents": "SetCustomGameTeamMaxPlayers(${1:int int_1}, ${2:int int_2})" },
		{ "trigger": "SetCustomVictoryMessage", "contents": "SetCustomVictoryMessage(${1:string string_1})" },
		{ "trigger": "AddBot", "contents": "AddBot(${1:string string_1}, ${2:string string_2}, ${3:string string_3}, ${4:bool bool_4})" },
		{ "trigger": "AddQuest", "contents": "AddQuest(${1:string string_1}, ${2:int int_2}, ${3:string string_3}, ${4:string string_4})" },
		{ "trigger": "AddShopWhitelistItem", "contents": "AddShopWhitelistItem(${1:string string_1})" },
		{ "trigger": "CompleteQuest", "contents": "CompleteQuest(${1:string string_1})" },
		{ "trigger": "CreateLocationTask", "contents": "CreateLocationTask(${1:Vector Vector_1})" },
		{ "trigger": "EnableCreepAggroViz", "contents": "EnableCreepAggroViz(${1:bool bool_1})" },
		{ "trigger": "EnablePlayerOffscreenTip", "contents": "EnablePlayerOffscreenTip(${1:bool bool_1})" },
		{ "trigger": "EnableTowerAggroViz", "contents": "EnableTowerAggroViz(${1:bool bool_1})" },
		{ "trigger": "FinishTutorial", "contents": "FinishTutorial()" },
		{ "trigger": "ForceGameStart", "contents": "ForceGameStart()" },
		{ "trigger": "GetTimeFrozen", "contents": "GetTimeFrozen()" },
		{ "trigger": "IsItemInWhiteList", "contents": "IsItemInWhiteList(${1:string string_1})" },
		{ "trigger": "RemoveShopWhitelistItem", "contents": "RemoveShopWhitelistItem(${1:string string_1})" },
		{ "trigger": "SelectHero", "contents": "SelectHero(${1:string string_1})" },
		{ "trigger": "SelectPlayerTeam", "contents": "SelectPlayerTeam(${1:string string_1})" },
		{ "trigger": "SetItemGuide", "contents": "SetItemGuide(${1:string string_1})" },
		{ "trigger": "SetOrModifyPlayerGold", "contents": "SetOrModifyPlayerGold(${1:int int_1}, ${2:bool bool_2})" },
		{ "trigger": "SetQuickBuy", "contents": "SetQuickBuy(${1:string string_1})" },
		{ "trigger": "SetShopOpen", "contents": "SetShopOpen(${1:bool bool_1})" },
		{ "trigger": "SetTimeFrozen", "contents": "SetTimeFrozen(${1:bool bool_1})" },
		{ "trigger": "SetTutorialConvar", "contents": "SetTutorialConvar(${1:string string_1}, ${2:string string_2})" },
		{ "trigger": "SetTutorialUI", "contents": "SetTutorialUI(${1:int int_1})" },
		{ "trigger": "SetWhiteListEnabled", "contents": "SetWhiteListEnabled(${1:bool bool_1})" },
		{ "trigger": "StartTutorialMode", "contents": "StartTutorialMode()" },
		{ "trigger": "UpgradePlayerAbility", "contents": "UpgradePlayerAbility(${1:string string_1})" },
		{ "trigger": "CastFilterResult", "contents": "CastFilterResult()" },
		{ "trigger": "CastFilterResultLocation", "contents": "CastFilterResultLocation(${1:Vector vLocation})" },
		{ "trigger": "CastFilterResultTarget", "contents": "CastFilterResultTarget(${1:handle hTarget})" },
		{ "trigger": "GetAssociatedPrimaryAbilities", "contents": "GetAssociatedPrimaryAbilities()" },
		{ "trigger": "GetAssociatedSecondaryAbilities", "contents": "GetAssociatedSecondaryAbilities()" },
		{ "trigger": "GetBehavior", "contents": "GetBehavior()" },
		{ "trigger": "GetCastRange", "contents": "GetCastRange(${1:Vector vLocation}, ${2:handle hTarget})" },
		{ "trigger": "GetChannelTime", "contents": "GetChannelTime()" },
		{ "trigger": "GetChannelledManaCostPerSecond", "contents": "GetChannelledManaCostPerSecond(${1:int iLevel})" },
		{ "trigger": "GetConceptRecipientType", "contents": "GetConceptRecipientType()" },
		{ "trigger": "GetCooldown", "contents": "GetCooldown(${1:int iLevel})" },
		{ "trigger": "GetCustomCastError", "contents": "GetCustomCastError()" },
		{ "trigger": "GetCustomCastErrorLocation", "contents": "GetCustomCastErrorLocation(${1:Vector vLocation})" },
		{ "trigger": "GetCustomCastErrorTarget", "contents": "GetCustomCastErrorTarget(${1:handle hTarget})" },
		{ "trigger": "GetGoldCost", "contents": "GetGoldCost(${1:int iLevel})" },
		{ "trigger": "GetIntrinsicModifierName", "contents": "GetIntrinsicModifierName()" },
		{ "trigger": "GetManaCost", "contents": "GetManaCost(${1:int iLevel})" },
		{ "trigger": "GetPlaybackRateOverride", "contents": "GetPlaybackRateOverride()" },
		{ "trigger": "IsHiddenAbilityCastable", "contents": "IsHiddenAbilityCastable()" },
		{ "trigger": "IsHiddenWhenStolen", "contents": "IsHiddenWhenStolen()" },
		{ "trigger": "IsRefreshable", "contents": "IsRefreshable()" },
		{ "trigger": "IsStealable", "contents": "IsStealable()" },
		{ "trigger": "OnAbilityPhaseInterrupted", "contents": "OnAbilityPhaseInterrupted()" },
		{ "trigger": "OnAbilityPhaseStart", "contents": "OnAbilityPhaseStart()" },
		{ "trigger": "OnChannelFinish", "contents": "OnChannelFinish(${1:bool bInterrupted})" },
		{ "trigger": "OnChannelThink", "contents": "OnChannelThink(${1:float flInterval})" },
		{ "trigger": "OnHeroCalculateStatBonus", "contents": "OnHeroCalculateStatBonus()" },
		{ "trigger": "OnHeroDiedNearby", "contents": "OnHeroDiedNearby(${1:handle unit}, ${2:handle attacker}, ${3:handle table})" },
		{ "trigger": "OnHeroLevelUp", "contents": "OnHeroLevelUp()" },
		{ "trigger": "OnInventoryContentsChanged", "contents": "OnInventoryContentsChanged()" },
		{ "trigger": "OnItemEquipped", "contents": "OnItemEquipped(${1:handle hItem})" },
		{ "trigger": "OnOwnerDied", "contents": "OnOwnerDied()" },
		{ "trigger": "OnOwnerSpawned", "contents": "OnOwnerSpawned()" },
		{ "trigger": "OnProjectileHit", "contents": "OnProjectileHit(${1:handle hTarget}, ${2:Vector vLocation})" },
		{ "trigger": "OnProjectileThink", "contents": "OnProjectileThink(${1:Vector vLocation})" },
		{ "trigger": "OnSpellStart", "contents": "OnSpellStart()" },
		{ "trigger": "OnStolen", "contents": "OnStolen(${1:handle hSourceAbility})" },
		{ "trigger": "OnToggle", "contents": "OnToggle()" },
		{ "trigger": "OnUnStolen", "contents": "OnUnStolen()" },
		{ "trigger": "OnUpgrade", "contents": "OnUpgrade()" },
		{ "trigger": "ProcsMagicStick", "contents": "ProcsMagicStick()" },
		{ "trigger": "SpeakTrigger", "contents": "SpeakTrigger()" },
		{ "trigger": "AddItemByName", "contents": "AddItemByName(${1:string pszItemName})" },
		{ "trigger": "AddNewModifier", "contents": "AddNewModifier(${1:handle caster}, ${2:handle optionalSourceAbility}, ${3:string modifierName}, ${4:handle modifierData})" },
		{ "trigger": "AddSpeechBubble", "contents": "AddSpeechBubble(${1:int iBubble}, ${2:string pszSpeech}, ${3:float flDuration}, ${4:unsigned unOffsetX}, ${5:unsigned unOffsetY})" },
		{ "trigger": "DestroyAllSpeechBubbles", "contents": "DestroyAllSpeechBubbles()" },
		{ "trigger": "FindModifierByName", "contents": "FindModifierByName(${1:string pszScriptName})" },
		{ "trigger": "GetCloneSource", "contents": "GetCloneSource()" },
		{ "trigger": "GetLastAttackTime", "contents": "GetLastAttackTime()" },
		{ "trigger": "GetMaximumGoldBounty", "contents": "GetMaximumGoldBounty()" },
		{ "trigger": "GetMinimumGoldBounty", "contents": "GetMinimumGoldBounty()" },
		{ "trigger": "GetNeverMoveToClearSpace", "contents": "GetNeverMoveToClearSpace()" },
		{ "trigger": "HasAnyActiveAbilities", "contents": "HasAnyActiveAbilities()" },
		{ "trigger": "IsBarracks", "contents": "IsBarracks()" },
		{ "trigger": "IsBoss", "contents": "IsBoss()" },
		{ "trigger": "IsBuilding", "contents": "IsBuilding()" },
		{ "trigger": "IsChanneling", "contents": "IsChanneling()" },
		{ "trigger": "IsClone", "contents": "IsClone()" },
		{ "trigger": "IsConsideredHero", "contents": "IsConsideredHero()" },
		{ "trigger": "IsCourier", "contents": "IsCourier()" },
		{ "trigger": "IsCreep", "contents": "IsCreep()" },
		{ "trigger": "IsFort", "contents": "IsFort()" },
		{ "trigger": "IsOther", "contents": "IsOther()" },
		{ "trigger": "ManageModelChanges", "contents": "ManageModelChanges()" },
		{ "trigger": "NotifyWearablesOfModelChange", "contents": "NotifyWearablesOfModelChange(${1:bool bOriginalModel})" },
		{ "trigger": "Purge", "contents": "Purge(${1:bool bRemovePositiveBuffs}, ${2:bool bRemoveDebuffs}, ${3:bool bFrameOnly}, ${4:bool bRemoveStuns}, ${5:bool bRemoveExceptions})" },
		{ "trigger": "RemoveGesture", "contents": "RemoveGesture(${1:int nActivity})" },
		{ "trigger": "RemoveHorizontalMotionController", "contents": "RemoveHorizontalMotionController(${1:handle hBuff})" },
		{ "trigger": "RemoveVerticalMotionController", "contents": "RemoveVerticalMotionController(${1:handle hBuff})" },
		{ "trigger": "SetCustomHealthLabel", "contents": "SetCustomHealthLabel(${1:string pLabel}, ${2:int r}, ${3:int g}, ${4:int b})" },
		{ "trigger": "SetOrigin", "contents": "SetOrigin(${1:Vector vLocation})" },
		{ "trigger": "StartGesture", "contents": "StartGesture(${1:int nActivity})" },
		{ "trigger": "TriggerSpellReflect", "contents": "TriggerSpellReflect(${1:handle hAbility})" },
		{ "trigger": "AddExperience", "contents": "AddExperience(${1:float amount}, ${2:int nReason}, ${3:bool bApplyBotDifficultyScaling}, ${4:bool bIncrementTotal})" },
		{ "trigger": "GetNumItemsInInventory", "contents": "GetNumItemsInInventory()" },
		{ "trigger": "GetNumItemsInStash", "contents": "GetNumItemsInStash()" },
		{ "trigger": "GetTogglableWearable", "contents": "GetTogglableWearable(${1:int nSlotType})" },
		{ "trigger": "IncrementDeaths", "contents": "IncrementDeaths(${1:int iKillerID})" },
		{ "trigger": "RespawnHero", "contents": "RespawnHero(${1:bool buyback}, ${2:bool unknown1}, ${3:bool unknown2})" },
		{ "trigger": "SetBotDifficulty", "contents": "SetBotDifficulty(${1:int nDifficulty})" },
		{ "trigger": "SetPrimaryAttribute", "contents": "SetPrimaryAttribute(${1:int nPrimaryAttribute})" },
		{ "trigger": "DynamicHud_Create", "contents": "DynamicHud_Create(${1:int int_1}, ${2:string string_2}, ${3:string string_3}, ${4:handle handle_4})" },
		{ "trigger": "DynamicHud_Destroy", "contents": "DynamicHud_Destroy(${1:int int_1}, ${2:string string_2})" },
		{ "trigger": "DynamicHud_SetDialogVariables", "contents": "DynamicHud_SetDialogVariables(${1:int int_1}, ${2:string string_2}, ${3:handle handle_3})" },
		{ "trigger": "DynamicHud_SetVisible", "contents": "DynamicHud_SetVisible(${1:int int_1}, ${2:string string_2}, ${3:bool bool_3})" },
		{ "trigger": "LaunchLootInitialHeight", "contents": "LaunchLootInitialHeight(${1:bool bAutoUse}, ${2:float flInitialHeight}, ${3:float flLaunchHeight}, ${4:float flDuration}, ${5:Vector vEndPoint})" },
		{ "trigger": "ApplyDataDrivenModifier", "contents": "ApplyDataDrivenModifier(${1:handle source}, ${2:handle target}, ${3:string modifier_name}, ${4:handle modifierArgs})" },
		{ "trigger": "GetOriginalLobbyTeam", "contents": "GetOriginalLobbyTeam(${1:int iPlayerID})" },
		{ "trigger": "GetPlayerCount", "contents": "GetPlayerCount()" },
		{ "trigger": "GetPlayerCountForTeam", "contents": "GetPlayerCountForTeam(${1:int iTeam})" },
		{ "trigger": "GetTeamPlayerCount", "contents": "GetTeamPlayerCount()" },
		{ "trigger": "IncrementDeaths", "contents": "IncrementDeaths(${1:int playerID}, ${2:int iKillerID})" },
		{ "trigger": "SetCustomPlayerColor", "contents": "SetCustomPlayerColor(${1:int iPlayerID}, ${2:int r}, ${3:int g}, ${4:int b})" },
		{ "trigger": "UpgradeToFlyingCourier", "contents": "UpgradeToFlyingCourier()" },
		{ "trigger": "GetVRHand", "contents": "GetVRHand(${1:int nHandID})" },
		{ "trigger": "GetAttachment", "contents": "GetAttachment()" },
		{ "trigger": "SetAttachment", "contents": "SetAttachment(${1:handle hAttachment})" },
		{ "trigger": "CreateParticleForTeam", "contents": "CreateParticleForTeam(${1:string string_1}, ${2:int int_2}, ${3:handle handle_3}, ${4:int int_4})" },
		{ "trigger": "SetParticleControlForward", "contents": "SetParticleControlForward(${1:int int_1}, ${2:int int_2}, ${3:Vector Vector_3})" },
		{ "trigger": "SetParticleControlOrientation", "contents": "SetParticleControlOrientation(${1:int int_1}, ${2:int int_2}, ${3:Vector Vector_3}, ${4:Vector Vector_4}, ${5:Vector Vector_5})" },
		{ "trigger": "DestroyTreesAroundPoint", "contents": "DestroyTreesAroundPoint(${1:Vector Vector_1}, ${2:float float_2}, ${3:bool bool_3})" },
		{ "trigger": "GetAllTreesAroundPoint", "contents": "GetAllTreesAroundPoint(${1:Vector Vector_1}, ${2:float float_2}, ${3:bool bool_3})" },
		{ "trigger": "GetLinearProjectileVelocity", "contents": "GetLinearProjectileVelocity(${1:int int_1})" },
		{ "trigger": "AppendToLogFile", "contents": "AppendToLogFile(${1:string string_1}, ${2:string string_2})" },
		{ "trigger": "AxisAngleToQuaternion", "contents": "AxisAngleToQuaternion(${1:Vector Vector_1}, ${2:float float_2})" },
		{ "trigger": "CancelEntityIOEvents", "contents": "CancelEntityIOEvents(${1:ehandle ehandle_1})" },
		{ "trigger": "CreateEffect", "contents": "CreateEffect(${1:handle handle_1})" },
		{ "trigger": "CreateItemOnPositionSync", "contents": "CreateItemOnPositionSync(${1:Vector Vector_1}, ${2:handle handle_2})" },
		{ "trigger": "CreateTrigger", "contents": "CreateTrigger(${1:Vector Vector_1}, ${2:Vector Vector_2}, ${3:Vector Vector_3})" },
		{ "trigger": "CreateTriggerRadiusApproximate", "contents": "CreateTriggerRadiusApproximate(${1:Vector Vector_1}, ${2:float float_2})" },
		{ "trigger": "CreateUnitByName", "contents": "CreateUnitByName(${1:string string_1}, ${2:Vector Vector_2}, ${3:bool bool_3}, ${4:handle handle_4}, ${5:handle handle_5}, ${6:int int_6})" },
		{ "trigger": "CreateUnitByNameAsync", "contents": "CreateUnitByNameAsync(${1:string string_1}, ${2:Vector Vector_2}, ${3:bool bool_3}, ${4:handle handle_4}, ${5:handle handle_5}, ${6:int int_6}, ${7:handle handle_7})" },
		{ "trigger": "DebugDrawBoxDirection", "contents": "DebugDrawBoxDirection(${1:Vector Vector_1}, ${2:Vector Vector_2}, ${3:Vector Vector_3}, ${4:Vector Vector_4}, ${5:Vector Vector_5}, ${6:float float_6}, ${7:float float_7})" },
		{ "trigger": "DebugDrawCircle", "contents": "DebugDrawCircle(${1:Vector Vector_1}, ${2:Vector Vector_2}, ${3:float float_3}, ${4:float float_4}, ${5:bool bool_5}, ${6:float float_6})" },
		{ "trigger": "DebugDrawLine", "contents": "DebugDrawLine(${1:Vector Vector_1}, ${2:Vector Vector_2}, ${3:int int_3}, ${4:int int_4}, ${5:int int_5}, ${6:bool bool_6}, ${7:float float_7})" },
		{ "trigger": "DebugDrawLine_vCol", "contents": "DebugDrawLine_vCol(${1:Vector Vector_1}, ${2:Vector Vector_2}, ${3:Vector Vector_3}, ${4:bool bool_4}, ${5:float float_5})" },
		{ "trigger": "DebugDrawScreenTextLine", "contents": "DebugDrawScreenTextLine(${1:float float_1}, ${2:float float_2}, ${3:int int_3}, ${4:string string_4}, ${5:int int_5}, ${6:int int_6}, ${7:int int_7}, ${8:int int_8}, ${9:float float_9})" },
		{ "trigger": "DebugDrawSphere", "contents": "DebugDrawSphere(${1:Vector Vector_1}, ${2:Vector Vector_2}, ${3:float float_3}, ${4:float float_4}, ${5:bool bool_5}, ${6:float float_6})" },
		{ "trigger": "DebugDrawText", "contents": "DebugDrawText(${1:Vector Vector_1}, ${2:string string_2}, ${3:bool bool_3}, ${4:float float_4})" },
		{ "trigger": "DebugScreenTextPretty", "contents": "DebugScreenTextPretty(${1:float float_1}, ${2:float float_2}, ${3:int int_3}, ${4:string string_4}, ${5:int int_5}, ${6:int int_6}, ${7:int int_7}, ${8:int int_8}, ${9:float float_9}, ${10:string string_10}, ${11:int int_11}, ${12:bool bool_12})" },
		{ "trigger": "DoEntFire", "contents": "DoEntFire(${1:string string_1}, ${2:string string_2}, ${3:string string_3}, ${4:float float_4}, ${5:handle handle_5}, ${6:handle handle_6})" },
		{ "trigger": "DoEntFireByInstanceHandle", "contents": "DoEntFireByInstanceHandle(${1:handle handle_1}, ${2:string string_2}, ${3:string string_3}, ${4:float float_4}, ${5:handle handle_5}, ${6:handle handle_6})" },
		{ "trigger": "DoIncludeScript", "contents": "DoIncludeScript(${1:string string_1}, ${2:handle handle_2})" },
		{ "trigger": "DoScriptAssert", "contents": "DoScriptAssert(${1:bool bool_1}, ${2:string string_2})" },
		{ "trigger": "DoUniqueString", "contents": "DoUniqueString(${1:string string_1})" },
		{ "trigger": "EmitGlobalSound", "contents": "EmitGlobalSound(${1:string string_1})" },
		{ "trigger": "EmitSoundOn", "contents": "EmitSoundOn(${1:string string_1}, ${2:handle handle_2})" },
		{ "trigger": "EmitSoundOnClient", "contents": "EmitSoundOnClient(${1:string string_1}, ${2:handle handle_2})" },
		{ "trigger": "EntIndexToHScript", "contents": "EntIndexToHScript(${1:int int_1})" },
		{ "trigger": "ExecuteOrderFromTable", "contents": "ExecuteOrderFromTable(${1:handle handle_1})" },
		{ "trigger": "ExponentialDecay", "contents": "ExponentialDecay(${1:float float_1}, ${2:float float_2}, ${3:float float_3})" },
		{ "trigger": "FindClearSpaceForUnit", "contents": "FindClearSpaceForUnit(${1:handle handle_1}, ${2:Vector Vector_2}, ${3:bool bool_3})" },
		{ "trigger": "FireEntityIOInputNameOnly", "contents": "FireEntityIOInputNameOnly(${1:ehandle ehandle_1}, ${2:string string_2})" },
		{ "trigger": "FireEntityIOInputString", "contents": "FireEntityIOInputString(${1:ehandle ehandle_1}, ${2:string string_2}, ${3:string string_3})" },
		{ "trigger": "FireEntityIOInputVec", "contents": "FireEntityIOInputVec(${1:ehandle ehandle_1}, ${2:string string_2}, ${3:Vector Vector_3})" },
		{ "trigger": "FireGameEventLocal", "contents": "FireGameEventLocal(${1:string string_1}, ${2:handle handle_2})" },
		{ "trigger": "GetFrostyBoostAmount", "contents": "GetFrostyBoostAmount(${1:int int_1}, ${2:int int_2})" },
		{ "trigger": "GetFrostyPointsForRound", "contents": "GetFrostyPointsForRound(${1:int int_1}, ${2:int int_2}, ${3:int int_3})" },
		{ "trigger": "GetGoldFrostyBoostAmount", "contents": "GetGoldFrostyBoostAmount(${1:int int_1}, ${2:int int_2})" },
		{ "trigger": "GetGoldFrostyPointsForRound", "contents": "GetGoldFrostyPointsForRound(${1:int int_1}, ${2:int int_2}, ${3:int int_3})" },
		{ "trigger": "GetGroundPosition", "contents": "GetGroundPosition(${1:Vector Vector_1}, ${2:handle handle_2})" },
		{ "trigger": "GetMaxOutputDelay", "contents": "GetMaxOutputDelay(${1:ehandle ehandle_1}, ${2:string string_2})" },
		{ "trigger": "GetPhysAngularVelocity", "contents": "GetPhysAngularVelocity(${1:handle handle_1})" },
		{ "trigger": "GetPhysVelocity", "contents": "GetPhysVelocity(${1:handle handle_1})" },
		{ "trigger": "InitLogFile", "contents": "InitLogFile(${1:string string_1}, ${2:string string_2})" },
		{ "trigger": "IsMarkedForDeletion", "contents": "IsMarkedForDeletion(${1:handle handle_1})" },
		{ "trigger": "IsValidEntity", "contents": "IsValidEntity(${1:handle handle_1})" },
		{ "trigger": "LoadKeyValues", "contents": "LoadKeyValues(${1:string string_1})" },
		{ "trigger": "LoadKeyValuesFromString", "contents": "LoadKeyValuesFromString(${1:string string_1})" },
		{ "trigger": "MakeStringToken", "contents": "MakeStringToken(${1:string string_1})" },
		{ "trigger": "Msg", "contents": "Msg(${1:string string_1})" },
		{ "trigger": "PauseGame", "contents": "PauseGame(${1:bool bool_1})" },
		{ "trigger": "PlayerInstanceFromIndex", "contents": "PlayerInstanceFromIndex(${1:int int_1})" },
		{ "trigger": "PrecacheEntityFromTable", "contents": "PrecacheEntityFromTable(${1:string string_1}, ${2:handle handle_2}, ${3:handle handle_3})" },
		{ "trigger": "PrecacheEntityListFromTable", "contents": "PrecacheEntityListFromTable(${1:handle handle_1}, ${2:handle handle_2})" },
		{ "trigger": "PrecacheItemByNameAsync", "contents": "PrecacheItemByNameAsync(${1:string string_1}, ${2:handle handle_2})" },
		{ "trigger": "PrecacheItemByNameSync", "contents": "PrecacheItemByNameSync(${1:string string_1}, ${2:handle handle_2})" },
		{ "trigger": "PrecacheModel", "contents": "PrecacheModel(${1:string string_1}, ${2:handle handle_2})" },
		{ "trigger": "PrecacheUnitByNameAsync", "contents": "PrecacheUnitByNameAsync(${1:string string_1}, ${2:handle handle_2})" },
		{ "trigger": "PrecacheUnitByNameSync", "contents": "PrecacheUnitByNameSync(${1:string string_1}, ${2:handle handle_2})" },
		{ "trigger": "PrintLinkedConsoleMessage", "contents": "PrintLinkedConsoleMessage(${1:string string_1}, ${2:string string_2})" },
		{ "trigger": "RandomFloat", "contents": "RandomFloat(${1:float float_1}, ${2:float float_2})" },
		{ "trigger": "RandomInt", "contents": "RandomInt(${1:int int_1}, ${2:int int_2})" },
		{ "trigger": "RegisterSpawnGroupFilterProxy", "contents": "RegisterSpawnGroupFilterProxy(${1:string string_1})" },
		{ "trigger": "RemoveSpawnGroupFilterProxy", "contents": "RemoveSpawnGroupFilterProxy(${1:string string_1})" },
		{ "trigger": "RollPercentage", "contents": "RollPercentage(${1:int int_1})" },
		{ "trigger": "RotateOrientation", "contents": "RotateOrientation(${1:QAngle QAngle_1}, ${2:QAngle QAngle_2})" },
		{ "trigger": "RotatePosition", "contents": "RotatePosition(${1:Vector Vector_1}, ${2:QAngle QAngle_2}, ${3:Vector Vector_3})" },
		{ "trigger": "RotateQuaternionByAxisAngle", "contents": "RotateQuaternionByAxisAngle(${1:Quaternion Quaternion_1}, ${2:Vector Vector_2}, ${3:float float_3})" },
		{ "trigger": "RotationDelta", "contents": "RotationDelta(${1:QAngle QAngle_1}, ${2:QAngle QAngle_2})" },
		{ "trigger": "ScreenShake", "contents": "ScreenShake(${1:Vector Vector_1}, ${2:float float_2}, ${3:float float_3}, ${4:float float_4}, ${5:float float_5}, ${6:int int_6}, ${7:bool bool_7})" },
		{ "trigger": "SendFrostyPointsMessageToGC", "contents": "SendFrostyPointsMessageToGC(${1:handle handle_1})" },
		{ "trigger": "SendToConsole", "contents": "SendToConsole(${1:string string_1})" },
		{ "trigger": "SendToServerConsole", "contents": "SendToServerConsole(${1:string string_1})" },
		{ "trigger": "SetOpvarFloatAll", "contents": "SetOpvarFloatAll(${1:string string_1}, ${2:string string_2}, ${3:string string_3}, ${4:float float_4})" },
		{ "trigger": "SetOpvarFloatPlayer", "contents": "SetOpvarFloatPlayer(${1:string string_1}, ${2:string string_2}, ${3:string string_3}, ${4:float float_4}, ${5:handle handle_5})" },
		{ "trigger": "SetQuestName", "contents": "SetQuestName(${1:string string_1})" },
		{ "trigger": "SetQuestPhase", "contents": "SetQuestPhase(${1:int int_1})" },
		{ "trigger": "SetRenderingEnabled", "contents": "SetRenderingEnabled(${1:ehandle ehandle_1}, ${2:bool bool_2})" },
		{ "trigger": "ShowGenericPopupToPlayer", "contents": "ShowGenericPopupToPlayer(${1:handle handle_1}, ${2:string string_2}, ${3:string string_3}, ${4:string string_4}, ${5:string string_5}, ${6:int int_6})" },
		{ "trigger": "ShowMessage", "contents": "ShowMessage(${1:string string_1})" },
		{ "trigger": "SpawnEntityFromTableSynchronous", "contents": "SpawnEntityFromTableSynchronous(${1:string string_1}, ${2:handle handle_2})" },
		{ "trigger": "SpawnEntityListFromTableAsynchronous", "contents": "SpawnEntityListFromTableAsynchronous(${1:handle handle_1}, ${2:handle handle_2})" },
		{ "trigger": "SpawnEntityListFromTableSynchronous", "contents": "SpawnEntityListFromTableSynchronous(${1:handle handle_1})" },
		{ "trigger": "SplineQuaternions", "contents": "SplineQuaternions(${1:Quaternion Quaternion_1}, ${2:Quaternion Quaternion_2}, ${3:float float_3})" },
		{ "trigger": "SplineVectors", "contents": "SplineVectors(${1:Vector Vector_1}, ${2:Vector Vector_2}, ${3:float float_3})" },
		{ "trigger": "StartSoundEvent", "contents": "StartSoundEvent(${1:string string_1}, ${2:handle handle_2})" },
		{ "trigger": "StopEffect", "contents": "StopEffect(${1:handle handle_1}, ${2:string string_2})" },
		{ "trigger": "StopListeningToAllGameEvents", "contents": "StopListeningToAllGameEvents(${1:handle handle_1})" },
		{ "trigger": "StopListeningToGameEvent", "contents": "StopListeningToGameEvent(${1:int int_1})" },
		{ "trigger": "StopSoundEvent", "contents": "StopSoundEvent(${1:string string_1}, ${2:handle handle_2})" },
		{ "trigger": "TraceCollideable", "contents": "TraceCollideable(${1:handle handle_1})" },
		{ "trigger": "TraceHull", "contents": "TraceHull(${1:handle handle_1})" },
		{ "trigger": "TraceLine", "contents": "TraceLine(${1:handle handle_1})" },
		{ "trigger": "UTIL_Remove", "contents": "UTIL_Remove(${1:handle handle_1})" },
		{ "trigger": "UTIL_RemoveImmediate", "contents": "UTIL_RemoveImmediate(${1:handle handle_1})" },
		{ "trigger": "UnloadSpawnGroup", "contents": "UnloadSpawnGroup(${1:string string_1})" },
		{ "trigger": "UnloadSpawnGroupByHandle", "contents": "UnloadSpawnGroupByHandle(${1:int int_1})" },
		{ "trigger": "UpdateEventPoints", "contents": "UpdateEventPoints(${1:handle handle_1})" },
		{ "trigger": "VectorToAngles", "contents": "VectorToAngles(${1:Vector Vector_1})" },
		{ "trigger": "Warning", "contents": "Warning(${1:string string_1})" },
		{ "trigger": "cvar_getf", "contents": "cvar_getf(${1:string string_1})" },
		{ "trigger": "cvar_setf", "contents": "cvar_setf(${1:string string_1}, ${2:float float_2})" },
		{ "trigger": "rr_AddDecisionRule", "contents": "rr_AddDecisionRule(${1:handle handle_1})" },
		{ "trigger": "rr_CommitAIResponse", "contents": "rr_CommitAIResponse(${1:handle handle_1}, ${2:handle handle_2})" },
		{ "trigger": "rr_QueryBestResponse", "contents": "rr_QueryBestResponse(${1:handle handle_1}, ${2:handle handle_2}, ${3:handle handle_3})" },
		{ "trigger": "GetAttachmentAngles", "contents": "GetAttachmentAngles(${1:int iAttachment})" },
		{ "trigger": "GetAttachmentOrigin", "contents": "GetAttachmentOrigin(${1:int iAttachment})" },
		{ "trigger": "ScriptLookupAttachment", "contents": "ScriptLookupAttachment(${1:string pAttachmentName})" },
		{ "trigger": "SetBodygroup", "contents": "SetBodygroup(${1:int iGroup}, ${2:int iValue})" },
		{ "trigger": "SetPoseParameter", "contents": "SetPoseParameter(${1:string szName}, ${2:float fValue})" },
		{ "trigger": "ApplyAbsVelocityImpulse", "contents": "ApplyAbsVelocityImpulse(${1:Vector vecImpulse})" },
		{ "trigger": "ApplyLocalAngularVelocityImpulse", "contents": "ApplyLocalAngularVelocityImpulse(${1:Vector angImpulse})" },
		{ "trigger": "GatherCriteria", "contents": "GatherCriteria(${1:handle hResult})" },
		{ "trigger": "GetContext", "contents": "GetContext(${1:string name})" },
		{ "trigger": "OverrideFriction", "contents": "OverrideFriction(${1:float duration}, ${2:float friction})" },
		{ "trigger": "PrecacheScriptSound", "contents": "PrecacheScriptSound(${1:string soundname})" },
		{ "trigger": "SetContext", "contents": "SetContext(${1:string pName}, ${2:string pValue}, ${3:float duration})" },
		{ "trigger": "SetContextNum", "contents": "SetContextNum(${1:string pName}, ${2:float fValue}, ${3:float duration})" },
		{ "trigger": "SetContextThink", "contents": "SetContextThink(${1:string pszContextName}, ${2:handle hThinkFunc}, ${3:float flInterval})" },
		{ "trigger": "SetFriction", "contents": "SetFriction(${1:float flFriction})" },
		{ "trigger": "SetGravity", "contents": "SetGravity(${1:float flGravity})" },
		{ "trigger": "SetParent", "contents": "SetParent(${1:handle hParent}, ${2:string pAttachmentname})" },
		{ "trigger": "SetVelocity", "contents": "SetVelocity(${1:Vector vecVelocity})" },
		{ "trigger": "GetSceneByIndex", "contents": "GetSceneByIndex(${1:int index})" },
		{ "trigger": "IsTouching", "contents": "IsTouching(${1:handle hEnt})" },
		{ "trigger": "AddImpulseAtPosition", "contents": "AddImpulseAtPosition(${1:Vector Vector_1}, ${2:Vector Vector_2})" },
		{ "trigger": "AddVelocity", "contents": "AddVelocity(${1:Vector Vector_1}, ${2:Vector Vector_2})" },
		{ "trigger": "LookupSequence", "contents": "LookupSequence(${1:string string_1})" },
		{ "trigger": "SequenceDuration", "contents": "SequenceDuration(${1:string string_1})" },
		{ "trigger": "SetAngularVelocity", "contents": "SetAngularVelocity(${1:Vector Vector_1})" },
		{ "trigger": "SetAnimation", "contents": "SetAnimation(${1:string string_1})" },
		{ "trigger": "SetBodyGroup", "contents": "SetBodyGroup(${1:string string_1})" },
		{ "trigger": "SetMaterialGroup", "contents": "SetMaterialGroup(${1:utlstringtoken utlstringtoken_1})" },
		{ "trigger": "CreateVisibilityNode", "contents": "CreateVisibilityNode(${1:Vector vLocation}, ${2:float fRadius}, ${3:float fDuration})" },
		{ "trigger": "EndChannel", "contents": "EndChannel(${1:bool bInterrupted})" },
		{ "trigger": "GetChannelledManaCostPerSecond", "contents": "GetChannelledManaCostPerSecond(${1:int iLevel})" },
		{ "trigger": "GetCooldown", "contents": "GetCooldown(${1:int iLevel})" },
		{ "trigger": "GetGoldCost", "contents": "GetGoldCost(${1:int iLevel})" },
		{ "trigger": "GetGoldCostForUpgrade", "contents": "GetGoldCostForUpgrade(${1:int iLevel})" },
		{ "trigger": "GetLevelSpecialValueFor", "contents": "GetLevelSpecialValueFor(${1:string szName}, ${2:int nLevel})" },
		{ "trigger": "GetManaCost", "contents": "GetManaCost(${1:int iLevel})" },
		{ "trigger": "GetSpecialValueFor", "contents": "GetSpecialValueFor(${1:string szName})" },
		{ "trigger": "HeroXPChange", "contents": "HeroXPChange(${1:float flXP})" },
		{ "trigger": "IsOwnersGoldEnough", "contents": "IsOwnersGoldEnough(${1:int nIssuerPlayerID})" },
		{ "trigger": "OnChannelFinish", "contents": "OnChannelFinish(${1:bool bInterrupted})" },
		{ "trigger": "OnChannelThink", "contents": "OnChannelThink(${1:float flInterval})" },
		{ "trigger": "SetAbilityIndex", "contents": "SetAbilityIndex(${1:int iIndex})" },
		{ "trigger": "SetActivated", "contents": "SetActivated(${1:bool bActivated})" },
		{ "trigger": "SetChanneling", "contents": "SetChanneling(${1:bool bChanneling})" },
		{ "trigger": "SetHidden", "contents": "SetHidden(${1:bool bHidden})" },
		{ "trigger": "SetInAbilityPhase", "contents": "SetInAbilityPhase(${1:bool bInAbilityPhase})" },
		{ "trigger": "SetLevel", "contents": "SetLevel(${1:int iLevel})" },
		{ "trigger": "SetOverrideCastPoint", "contents": "SetOverrideCastPoint(${1:float flCastPoint})" },
		{ "trigger": "SetRefCountsModifiers", "contents": "SetRefCountsModifiers(${1:bool bRefCounts})" },
		{ "trigger": "SetStolen", "contents": "SetStolen(${1:bool bStolen})" },
		{ "trigger": "SpeakAbilityConcept", "contents": "SpeakAbilityConcept(${1:int iConcept})" },
		{ "trigger": "StartCooldown", "contents": "StartCooldown(${1:float flCooldown})" },
		{ "trigger": "UseResources", "contents": "UseResources(${1:bool bMana}, ${2:bool bGold}, ${3:bool bCooldown})" },
		{ "trigger": "SetAlwaysShowPlayerInventory", "contents": "SetAlwaysShowPlayerInventory(${1:bool bAlwaysShow})" },
		{ "trigger": "SetBotThinkingEnabled", "contents": "SetBotThinkingEnabled(${1:bool bEnabled})" },
		{ "trigger": "SetBuybackEnabled", "contents": "SetBuybackEnabled(${1:bool bEnabled})" },
		{ "trigger": "SetCameraDistanceOverride", "contents": "SetCameraDistanceOverride(${1:float flCameraDistanceOverride})" },
		{ "trigger": "SetCustomBuybackCooldownEnabled", "contents": "SetCustomBuybackCooldownEnabled(${1:bool bEnabled})" },
		{ "trigger": "SetCustomBuybackCostEnabled", "contents": "SetCustomBuybackCostEnabled(${1:bool bEnabled})" },
		{ "trigger": "SetCustomXPRequiredToReachNextLevel", "contents": "SetCustomXPRequiredToReachNextLevel(${1:handle hTable})" },
		{ "trigger": "SetFogOfWarDisabled", "contents": "SetFogOfWarDisabled(${1:bool bDisabled})" },
		{ "trigger": "SetGoldSoundDisabled", "contents": "SetGoldSoundDisabled(${1:bool bDisabled})" },
		{ "trigger": "SetRecommendedItemsDisabled", "contents": "SetRecommendedItemsDisabled(${1:bool bDisabled})" },
		{ "trigger": "SetRemoveIllusionsOnDeath", "contents": "SetRemoveIllusionsOnDeath(${1:bool bRemove})" },
		{ "trigger": "SetTopBarTeamValue", "contents": "SetTopBarTeamValue(${1:int iTeam}, ${2:int nValue})" },
		{ "trigger": "SetTopBarTeamValuesOverride", "contents": "SetTopBarTeamValuesOverride(${1:bool bOverride})" },
		{ "trigger": "SetTopBarTeamValuesVisible", "contents": "SetTopBarTeamValuesVisible(${1:bool bVisible})" },
		{ "trigger": "SetTowerBackdoorProtectionEnabled", "contents": "SetTowerBackdoorProtectionEnabled(${1:bool bEnabled})" },
		{ "trigger": "SetUseCustomHeroLevels", "contents": "SetUseCustomHeroLevels(${1:bool bEnabled})" },
		{ "trigger": "SetCustomGameDifficulty", "contents": "SetCustomGameDifficulty(${1:int int_1})" },
		{ "trigger": "SetFirstBloodActive", "contents": "SetFirstBloodActive(${1:bool bool_1})" },
		{ "trigger": "SetGoldPerTick", "contents": "SetGoldPerTick(${1:int int_1})" },
		{ "trigger": "SetGoldTickTime", "contents": "SetGoldTickTime(${1:float float_1})" },
		{ "trigger": "SetNianFightStartTime", "contents": "SetNianFightStartTime(${1:float float_1})" },
		{ "trigger": "SetUseBaseGoldBountyOnHeroes", "contents": "SetUseBaseGoldBountyOnHeroes(${1:bool bool_1})" },
		{ "trigger": "SetUseCustomHeroXPValues", "contents": "SetUseCustomHeroXPValues(${1:bool bool_1})" },
		{ "trigger": "SetKillCamUnit", "contents": "SetKillCamUnit(${1:handle hEntity})" },
		{ "trigger": "StartVote", "contents": "StartVote(${1:handle handle_1})" },
		{ "trigger": "SetPlaybackRate", "contents": "SetPlaybackRate(${1:float flRate})" },
		{ "trigger": "SetPlaybackRate", "contents": "SetPlaybackRate(${1:float flRate})" },
		{ "trigger": "ApplyDataDrivenModifier", "contents": "ApplyDataDrivenModifier(${1:handle hCaster}, ${2:handle hTarget}, ${3:string pszModifierName}, ${4:handle hModifierTable})" },
		{ "trigger": "SetPlaybackRate", "contents": "SetPlaybackRate(${1:float flRate})" },
		{ "trigger": "SetPlaybackRate", "contents": "SetPlaybackRate(${1:float flRate})" },
		{ "trigger": "AddAbility", "contents": "AddAbility(${1:string pszAbilityName})" },
		{ "trigger": "AddItem", "contents": "AddItem(${1:handle hItem})" },
		{ "trigger": "AlertNearbyUnits", "contents": "AlertNearbyUnits(${1:handle hAttacker}, ${2:handle hAbility})" },
		{ "trigger": "AttackNoEarlierThan", "contents": "AttackNoEarlierThan(${1:float flTime})" },
		{ "trigger": "CanEntityBeSeenByMyTeam", "contents": "CanEntityBeSeenByMyTeam(${1:handle hEntity})" },
		{ "trigger": "CastAbilityOnPosition", "contents": "CastAbilityOnPosition(${1:Vector vPosition}, ${2:handle hAbility}, ${3:int iPlayerIndex})" },
		{ "trigger": "CastAbilityToggle", "contents": "CastAbilityToggle(${1:handle hAbility}, ${2:int iPlayerIndex})" },
		{ "trigger": "DisassembleItem", "contents": "DisassembleItem(${1:handle hItem})" },
		{ "trigger": "DropItemAtPosition", "contents": "DropItemAtPosition(${1:Vector vDest}, ${2:handle hItem})" },
		{ "trigger": "DropItemAtPositionImmediate", "contents": "DropItemAtPositionImmediate(${1:handle hItem}, ${2:Vector vPosition})" },
		{ "trigger": "EjectItemFromStash", "contents": "EjectItemFromStash(${1:handle hItem})" },
		{ "trigger": "FindAbilityByName", "contents": "FindAbilityByName(${1:string pAbilityName})" },
		{ "trigger": "ForceKill", "contents": "ForceKill(${1:bool bReincarnate})" },
		{ "trigger": "GetAbilityByIndex", "contents": "GetAbilityByIndex(${1:int iIndex})" },
		{ "trigger": "GetCastPoint", "contents": "GetCastPoint(${1:bool bAttack})" },
		{ "trigger": "GetItemInSlot", "contents": "GetItemInSlot(${1:int i})" },
		{ "trigger": "GetModifierNameByIndex", "contents": "GetModifierNameByIndex(${1:int nIndex})" },
		{ "trigger": "GetModifierStackCount", "contents": "GetModifierStackCount(${1:string modifierName}, ${2:handle hCaster})" },
		{ "trigger": "GetMoveSpeedModifier", "contents": "GetMoveSpeedModifier(${1:float flBaseSpeed})" },
		{ "trigger": "GetRangeToUnit", "contents": "GetRangeToUnit(${1:handle hNPC})" },
		{ "trigger": "GiveMana", "contents": "GiveMana(${1:float flMana})" },
		{ "trigger": "HasAbility", "contents": "HasAbility(${1:string pszAbilityName})" },
		{ "trigger": "HasItemInInventory", "contents": "HasItemInInventory(${1:string pItemName})" },
		{ "trigger": "HasModifier", "contents": "HasModifier(${1:string pszScriptName})" },
		{ "trigger": "InterruptMotionControllers", "contents": "InterruptMotionControllers(${1:bool bFindClearSpace})" },
		{ "trigger": "IsAttackingEntity", "contents": "IsAttackingEntity(${1:handle hEntity})" },
		{ "trigger": "IsOpposingTeam", "contents": "IsOpposingTeam(${1:int nTeam})" },
		{ "trigger": "IsPositionInRange", "contents": "IsPositionInRange(${1:Vector vPosition}, ${2:float flRange})" },
		{ "trigger": "Kill", "contents": "Kill(${1:handle hAbility}, ${2:handle hAttacker})" },
		{ "trigger": "MakeVisibleDueToAttack", "contents": "MakeVisibleDueToAttack(${1:int iTeam})" },
		{ "trigger": "MakeVisibleToTeam", "contents": "MakeVisibleToTeam(${1:int iTeam}, ${2:float flDuration})" },
		{ "trigger": "ModifyHealth", "contents": "ModifyHealth(${1:int iDesiredHealthValue}, ${2:handle hAbility}, ${3:bool bLethal}, ${4:int iAdditionalFlags})" },
		{ "trigger": "MoveToNPC", "contents": "MoveToNPC(${1:handle hNPC})" },
		{ "trigger": "MoveToPosition", "contents": "MoveToPosition(${1:Vector vDest})" },
		{ "trigger": "MoveToPositionAggressive", "contents": "MoveToPositionAggressive(${1:Vector vDest})" },
		{ "trigger": "MoveToTargetToAttack", "contents": "MoveToTargetToAttack(${1:handle hTarget})" },
		{ "trigger": "PerformAttack", "contents": "PerformAttack(${1:handle hTarget}, ${2:bool bUseCastAttackOrb}, ${3:bool bProcessProcs}, ${4:bool bSkipCooldown}, ${5:bool bIgnoreInvis})" },
		{ "trigger": "PickupDroppedItem", "contents": "PickupDroppedItem(${1:handle hItem})" },
		{ "trigger": "PickupRune", "contents": "PickupRune(${1:handle hItem})" },
		{ "trigger": "ReduceMana", "contents": "ReduceMana(${1:float flAmount})" },
		{ "trigger": "RemoveAbility", "contents": "RemoveAbility(${1:string pszAbilityName})" },
		{ "trigger": "RemoveItem", "contents": "RemoveItem(${1:handle hItem})" },
		{ "trigger": "RemoveModifierByName", "contents": "RemoveModifierByName(${1:string pszScriptName})" },
		{ "trigger": "RemoveModifierByNameAndCaster", "contents": "RemoveModifierByNameAndCaster(${1:string pszScriptName}, ${2:handle hCaster})" },
		{ "trigger": "SellItem", "contents": "SellItem(${1:handle hItem})" },
		{ "trigger": "SetAcquisitionRange", "contents": "SetAcquisitionRange(${1:float nRange})" },
		{ "trigger": "SetAdditionalBattleMusicWeight", "contents": "SetAdditionalBattleMusicWeight(${1:float flWeight})" },
		{ "trigger": "SetAttackCapability", "contents": "SetAttackCapability(${1:int iAttackCapabilities})" },
		{ "trigger": "SetAttacking", "contents": "SetAttacking(${1:handle hAttackTarget})" },
		{ "trigger": "SetBaseAttackTime", "contents": "SetBaseAttackTime(${1:float flBaseAttackTime})" },
		{ "trigger": "SetBaseDamageMax", "contents": "SetBaseDamageMax(${1:int nMax})" },
		{ "trigger": "SetBaseDamageMin", "contents": "SetBaseDamageMin(${1:int nMin})" },
		{ "trigger": "SetBaseHealthRegen", "contents": "SetBaseHealthRegen(${1:float flHealthRegen})" },
		{ "trigger": "SetBaseMagicalResistanceValue", "contents": "SetBaseMagicalResistanceValue(${1:float flMagicalResistanceValue})" },
		{ "trigger": "SetBaseManaRegen", "contents": "SetBaseManaRegen(${1:float flManaRegen})" },
		{ "trigger": "SetBaseMaxHealth", "contents": "SetBaseMaxHealth(${1:float flBaseMaxHealth})" },
		{ "trigger": "SetBaseMoveSpeed", "contents": "SetBaseMoveSpeed(${1:int iMoveSpeed})" },
		{ "trigger": "SetControllableByPlayer", "contents": "SetControllableByPlayer(${1:int iIndex}, ${2:bool bSkipAdjustingPosition})" },
		{ "trigger": "SetCursorCastTarget", "contents": "SetCursorCastTarget(${1:handle hEntity})" },
		{ "trigger": "SetCursorPosition", "contents": "SetCursorPosition(${1:Vector vLocation})" },
		{ "trigger": "SetCursorTargetingNothing", "contents": "SetCursorTargetingNothing(${1:bool bTargetingNothing})" },
		{ "trigger": "SetDayTimeVisionRange", "contents": "SetDayTimeVisionRange(${1:int iRange})" },
		{ "trigger": "SetDeathXP", "contents": "SetDeathXP(${1:int iXPBounty})" },
		{ "trigger": "SetForceAttackTarget", "contents": "SetForceAttackTarget(${1:handle hNPC})" },
		{ "trigger": "SetHasInventory", "contents": "SetHasInventory(${1:bool bHasInventory})" },
		{ "trigger": "SetHullRadius", "contents": "SetHullRadius(${1:float flHullRadius})" },
		{ "trigger": "SetIdleAcquire", "contents": "SetIdleAcquire(${1:bool bIdleAcquire})" },
		{ "trigger": "SetInitialGoalEntity", "contents": "SetInitialGoalEntity(${1:handle hGoal})" },
		{ "trigger": "SetMana", "contents": "SetMana(${1:float flMana})" },
		{ "trigger": "SetMaximumGoldBounty", "contents": "SetMaximumGoldBounty(${1:int iGoldBountyMax})" },
		{ "trigger": "SetMinimumGoldBounty", "contents": "SetMinimumGoldBounty(${1:int iGoldBountyMin})" },
		{ "trigger": "SetModifierStackCount", "contents": "SetModifierStackCount(${1:string modifierName}, ${2:handle hCaster}, ${3:int modifierCount})" },
		{ "trigger": "SetMoveCapability", "contents": "SetMoveCapability(${1:int iMoveCapabilities})" },
		{ "trigger": "SetMustReachEachGoalEntity", "contents": "SetMustReachEachGoalEntity(${1:bool must})" },
		{ "trigger": "SetNeverMoveToClearSpace", "contents": "SetNeverMoveToClearSpace(${1:bool neverMoveToClearSpace})" },
		{ "trigger": "SetNightTimeVisionRange", "contents": "SetNightTimeVisionRange(${1:int iRange})" },
		{ "trigger": "SetPhysicalArmorBaseValue", "contents": "SetPhysicalArmorBaseValue(${1:float flPhysicalArmorValue})" },
		{ "trigger": "SetRangedProjectileName", "contents": "SetRangedProjectileName(${1:string pProjectileName})" },
		{ "trigger": "SetStolenScepter", "contents": "SetStolenScepter(${1:bool bStolenScepter})" },
		{ "trigger": "SetUnitName", "contents": "SetUnitName(${1:string pName})" },
		{ "trigger": "SpendMana", "contents": "SpendMana(${1:float flManaSpent}, ${2:handle hAbility})" },
		{ "trigger": "SwapAbilities", "contents": "SwapAbilities(${1:string pAbilityName1}, ${2:string pAbilityName2}, ${3:bool bEnable1}, ${4:bool bEnable2})" },
		{ "trigger": "TriggerSpellAbsorb", "contents": "TriggerSpellAbsorb(${1:handle hAbility})" },
		{ "trigger": "SetInvulnCount", "contents": "SetInvulnCount(${1:int nInvulnCount})" },
		{ "trigger": "AddItemDrop", "contents": "AddItemDrop(${1:handle hDropData})" },
		{ "trigger": "CreatureLevelUp", "contents": "CreatureLevelUp(${1:int iLevels})" },
		{ "trigger": "SetArmorGain", "contents": "SetArmorGain(${1:float flArmorGain})" },
		{ "trigger": "SetAttackTimeGain", "contents": "SetAttackTimeGain(${1:float flAttackTimeGain})" },
		{ "trigger": "SetBountyGain", "contents": "SetBountyGain(${1:int nBountyGain})" },
		{ "trigger": "SetChampion", "contents": "SetChampion(${1:bool bIsChampion})" },
		{ "trigger": "SetDamageGain", "contents": "SetDamageGain(${1:int nDamageGain})" },
		{ "trigger": "SetDisableResistanceGain", "contents": "SetDisableResistanceGain(${1:float flDisableResistanceGain})" },
		{ "trigger": "SetHPGain", "contents": "SetHPGain(${1:int nHPGain})" },
		{ "trigger": "SetHPRegenGain", "contents": "SetHPRegenGain(${1:float flHPRegenGain})" },
		{ "trigger": "SetMagicResistanceGain", "contents": "SetMagicResistanceGain(${1:float flMagicResistanceGain})" },
		{ "trigger": "SetManaGain", "contents": "SetManaGain(${1:int nManaGain})" },
		{ "trigger": "SetManaRegenGain", "contents": "SetManaRegenGain(${1:float flManaRegenGain})" },
		{ "trigger": "SetMoveSpeedGain", "contents": "SetMoveSpeedGain(${1:int nMoveSpeedGain})" },
		{ "trigger": "SetXPGain", "contents": "SetXPGain(${1:int nXPGain})" },
		{ "trigger": "GetAttacker", "contents": "GetAttacker(${1:int nIndex})" },
		{ "trigger": "HasRoomForItem", "contents": "HasRoomForItem(${1:string pItemName}, ${2:bool bIncludeStashCombines}, ${3:bool bAllowSelling})" },
		{ "trigger": "HeroLevelUp", "contents": "HeroLevelUp(${1:bool bPlayEffects})" },
		{ "trigger": "KilledHero", "contents": "KilledHero(${1:handle hHero}, ${2:handle hInflictor})" },
		{ "trigger": "ModifyAgility", "contents": "ModifyAgility(${1:float flNewAgility})" },
		{ "trigger": "ModifyIntellect", "contents": "ModifyIntellect(${1:float flNewIntellect})" },
		{ "trigger": "ModifyStrength", "contents": "ModifyStrength(${1:float flNewStrength})" },
		{ "trigger": "SetAbilityPoints", "contents": "SetAbilityPoints(${1:int iPoints})" },
		{ "trigger": "SetBaseAgility", "contents": "SetBaseAgility(${1:float flAgility})" },
		{ "trigger": "SetBaseIntellect", "contents": "SetBaseIntellect(${1:float flIntellect})" },
		{ "trigger": "SetBaseStrength", "contents": "SetBaseStrength(${1:float flStrength})" },
		{ "trigger": "SetBuyBackDisabledByReapersScythe", "contents": "SetBuyBackDisabledByReapersScythe(${1:bool bBuybackDisabled})" },
		{ "trigger": "SetBuybackCooldownTime", "contents": "SetBuybackCooldownTime(${1:float flTime})" },
		{ "trigger": "SetBuybackGoldLimitTime", "contents": "SetBuybackGoldLimitTime(${1:float flTime})" },
		{ "trigger": "SetCustomDeathXP", "contents": "SetCustomDeathXP(${1:int iValue})" },
		{ "trigger": "SetPlayerID", "contents": "SetPlayerID(${1:int iPlayerID})" },
		{ "trigger": "SetRespawnPosition", "contents": "SetRespawnPosition(${1:Vector vOrigin})" },
		{ "trigger": "SetTimeUntilRespawn", "contents": "SetTimeUntilRespawn(${1:float time})" },
		{ "trigger": "UpgradeAbility", "contents": "UpgradeAbility(${1:handle hAbility})" },
		{ "trigger": "SetCurrentCharges", "contents": "SetCurrentCharges(${1:int iCharges})" },
		{ "trigger": "SetPurchaseTime", "contents": "SetPurchaseTime(${1:float flTime})" },
		{ "trigger": "SetPurchaser", "contents": "SetPurchaser(${1:handle hPurchaser})" },
		{ "trigger": "SetStacksWithOtherOwners", "contents": "SetStacksWithOtherOwners(${1:bool bStacksWithOtherOwners})" },
		{ "trigger": "SetContainedItem", "contents": "SetContainedItem(${1:handle hItem})" },
		{ "trigger": "AddAegisPickup", "contents": "AddAegisPickup(${1:int iPlayerID})" },
		{ "trigger": "AddClaimedFarm", "contents": "AddClaimedFarm(${1:int iPlayerID}, ${2:float flFarmValue}, ${3:bool bEarnedValue})" },
		{ "trigger": "AddGoldSpentOnSupport", "contents": "AddGoldSpentOnSupport(${1:int iPlayerID}, ${2:int iCost})" },
		{ "trigger": "AddRunePickup", "contents": "AddRunePickup(${1:int iPlayerID})" },
		{ "trigger": "AreUnitsSharedWithPlayerID", "contents": "AreUnitsSharedWithPlayerID(${1:int nUnitOwnerPlayerID}, ${2:int nOtherPlayerID})" },
		{ "trigger": "ClearKillsMatrix", "contents": "ClearKillsMatrix(${1:int iPlayerID})" },
		{ "trigger": "ClearLastHitMultikill", "contents": "ClearLastHitMultikill(${1:int iPlayerID})" },
		{ "trigger": "ClearLastHitStreak", "contents": "ClearLastHitStreak(${1:int iPlayerID})" },
		{ "trigger": "ClearRawPlayerDamageMatrix", "contents": "ClearRawPlayerDamageMatrix(${1:int iPlayerID})" },
		{ "trigger": "ClearStreak", "contents": "ClearStreak(${1:int iPlayerID})" },
		{ "trigger": "GetAegisPickups", "contents": "GetAegisPickups(${1:int iPlayerID})" },
		{ "trigger": "GetAssists", "contents": "GetAssists(${1:int iPlayerID})" },
		{ "trigger": "GetBroadcasterChannel", "contents": "GetBroadcasterChannel(${1:int iPlayerID})" },
		{ "trigger": "GetBroadcasterChannelSlot", "contents": "GetBroadcasterChannelSlot(${1:int iPlayerID})" },
		{ "trigger": "GetClaimedDenies", "contents": "GetClaimedDenies(${1:int iPlayerID})" },
		{ "trigger": "GetClaimedFarm", "contents": "GetClaimedFarm(${1:int iPlayerID}, ${2:bool bOnlyEarned})" },
		{ "trigger": "GetClaimedMisses", "contents": "GetClaimedMisses(${1:int iPlayerID})" },
		{ "trigger": "GetConnectionState", "contents": "GetConnectionState(${1:int iPlayerID})" },
		{ "trigger": "GetCreepDamageTaken", "contents": "GetCreepDamageTaken(${1:int iPlayerID}, ${2:bool bTotal})" },
		{ "trigger": "GetCustomBuybackCooldown", "contents": "GetCustomBuybackCooldown(${1:int iPlayerID})" },
		{ "trigger": "GetCustomBuybackCost", "contents": "GetCustomBuybackCost(${1:int iPlayerID})" },
		{ "trigger": "GetDamageDoneToHero", "contents": "GetDamageDoneToHero(${1:int iPlayerID}, ${2:int iVictimID})" },
		{ "trigger": "GetDeaths", "contents": "GetDeaths(${1:int iPlayerID})" },
		{ "trigger": "GetDenies", "contents": "GetDenies(${1:int iPlayerID})" },
		{ "trigger": "GetEventPointsForPlayerID", "contents": "GetEventPointsForPlayerID(${1:int iPlayerID})" },
		{ "trigger": "GetEventPremiumPointsGranted", "contents": "GetEventPremiumPointsGranted(${1:int iPlayerID})" },
		{ "trigger": "GetEventRankGranted", "contents": "GetEventRankGranted(${1:int iPlayerID})" },
		{ "trigger": "GetGoldBagsCollected", "contents": "GetGoldBagsCollected(${1:int iPlayerID})" },
		{ "trigger": "GetGoldLostToDeath", "contents": "GetGoldLostToDeath(${1:int iPlayerID})" },
		{ "trigger": "GetGoldPerMin", "contents": "GetGoldPerMin(${1:int iPlayerID})" },
		{ "trigger": "GetGoldSpentOnBuybacks", "contents": "GetGoldSpentOnBuybacks(${1:int iPlayerID})" },
		{ "trigger": "GetGoldSpentOnConsumables", "contents": "GetGoldSpentOnConsumables(${1:int iPlayerID})" },
		{ "trigger": "GetGoldSpentOnItems", "contents": "GetGoldSpentOnItems(${1:int iPlayerID})" },
		{ "trigger": "GetGoldSpentOnSupport", "contents": "GetGoldSpentOnSupport(${1:int iPlayerID})" },
		{ "trigger": "GetHealing", "contents": "GetHealing(${1:int iPlayerID})" },
		{ "trigger": "GetHeroDamageTaken", "contents": "GetHeroDamageTaken(${1:int iPlayerID}, ${2:bool bTotal})" },
		{ "trigger": "GetLastHitMultikill", "contents": "GetLastHitMultikill(${1:int iPlayerID})" },
		{ "trigger": "GetLastHitStreak", "contents": "GetLastHitStreak(${1:int iPlayerID})" },
		{ "trigger": "GetMisses", "contents": "GetMisses(${1:int iPlayerID})" },
		{ "trigger": "GetNearbyCreepDeaths", "contents": "GetNearbyCreepDeaths(${1:int iPlayerID})" },
		{ "trigger": "GetNthCourierForTeam", "contents": "GetNthCourierForTeam(${1:int nCourierIndex}, ${2:int nTeamNumber})" },
		{ "trigger": "GetNthPlayerIDOnTeam", "contents": "GetNthPlayerIDOnTeam(${1:int iTeamNumber}, ${2:int iNthPlayer})" },
		{ "trigger": "GetNumConsumablesPurchased", "contents": "GetNumConsumablesPurchased(${1:int iPlayerID})" },
		{ "trigger": "GetNumCouriersForTeam", "contents": "GetNumCouriersForTeam(${1:int nTeamNumber})" },
		{ "trigger": "GetNumItemsPurchased", "contents": "GetNumItemsPurchased(${1:int iPlayerID})" },
		{ "trigger": "GetPlayerLoadedCompletely", "contents": "GetPlayerLoadedCompletely(${1:int iPlayerID})" },
		{ "trigger": "GetPlayerName", "contents": "GetPlayerName(${1:int iPlayerID})" },
		{ "trigger": "GetPlayerReservedState", "contents": "GetPlayerReservedState(${1:int iPlayerID})" },
		{ "trigger": "GetRawPlayerDamage", "contents": "GetRawPlayerDamage(${1:int iPlayerID})" },
		{ "trigger": "GetRespawnSeconds", "contents": "GetRespawnSeconds(${1:int iPlayerID})" },
		{ "trigger": "GetRoshanKills", "contents": "GetRoshanKills(${1:int iPlayerID})" },
		{ "trigger": "GetRunePickups", "contents": "GetRunePickups(${1:int iPlayerID})" },
		{ "trigger": "GetSelectedHeroEntity", "contents": "GetSelectedHeroEntity(${1:int iPlayerID})" },
		{ "trigger": "GetSelectedHeroID", "contents": "GetSelectedHeroID(${1:int iPlayerID})" },
		{ "trigger": "GetSelectedHeroName", "contents": "GetSelectedHeroName(${1:int iPlayerID})" },
		{ "trigger": "GetSteamAccountID", "contents": "GetSteamAccountID(${1:int iPlayerID})" },
		{ "trigger": "GetStreak", "contents": "GetStreak(${1:int iPlayerID})" },
		{ "trigger": "GetStuns", "contents": "GetStuns(${1:int iPlayerID})" },
		{ "trigger": "GetTeam", "contents": "GetTeam(${1:int iPlayerID})" },
		{ "trigger": "GetTeamKills", "contents": "GetTeamKills(${1:int iTeam})" },
		{ "trigger": "GetTimeOfLastConsumablePurchase", "contents": "GetTimeOfLastConsumablePurchase(${1:int iPlayerID})" },
		{ "trigger": "GetTimeOfLastDeath", "contents": "GetTimeOfLastDeath(${1:int iPlayerID})" },
		{ "trigger": "GetTimeOfLastItemPurchase", "contents": "GetTimeOfLastItemPurchase(${1:int iPlayerID})" },
		{ "trigger": "GetTotalEarnedGold", "contents": "GetTotalEarnedGold(${1:int iPlayerID})" },
		{ "trigger": "GetTotalEarnedXP", "contents": "GetTotalEarnedXP(${1:int iPlayerID})" },
		{ "trigger": "GetTotalGoldSpent", "contents": "GetTotalGoldSpent(${1:int iPlayerID})" },
		{ "trigger": "GetTowerDamageTaken", "contents": "GetTowerDamageTaken(${1:int iPlayerID}, ${2:bool bTotal})" },
		{ "trigger": "GetTowerKills", "contents": "GetTowerKills(${1:int iPlayerID})" },
		{ "trigger": "GetUnitShareMaskForPlayer", "contents": "GetUnitShareMaskForPlayer(${1:int nPlayerID}, ${2:int nOtherPlayerID})" },
		{ "trigger": "GetXPPerMin", "contents": "GetXPPerMin(${1:int iPlayerID})" },
		{ "trigger": "HasRandomed", "contents": "HasRandomed(${1:int iPlayerID})" },
		{ "trigger": "HasSelectedHero", "contents": "HasSelectedHero(${1:int iPlayerID})" },
		{ "trigger": "HeroLevelUp", "contents": "HeroLevelUp(${1:int iPlayerID})" },
		{ "trigger": "IncrementClaimedDenies", "contents": "IncrementClaimedDenies(${1:int iPlayerID})" },
		{ "trigger": "IncrementClaimedMisses", "contents": "IncrementClaimedMisses(${1:int iPlayerID})" },
		{ "trigger": "IncrementDenies", "contents": "IncrementDenies(${1:int iPlayerID})" },
		{ "trigger": "IncrementGoldBagsCollected", "contents": "IncrementGoldBagsCollected(${1:int iPlayerID})" },
		{ "trigger": "IncrementLastHitMultikill", "contents": "IncrementLastHitMultikill(${1:int iPlayerID})" },
		{ "trigger": "IncrementLastHitStreak", "contents": "IncrementLastHitStreak(${1:int iPlayerID})" },
		{ "trigger": "IncrementLastHits", "contents": "IncrementLastHits(${1:int iPlayerID})" },
		{ "trigger": "IncrementMisses", "contents": "IncrementMisses(${1:int iPlayerID})" },
		{ "trigger": "IncrementNearbyCreepDeaths", "contents": "IncrementNearbyCreepDeaths(${1:int iPlayerID})" },
		{ "trigger": "IncrementStreak", "contents": "IncrementStreak(${1:int iPlayerID})" },
		{ "trigger": "IncrementTotalEarnedXP", "contents": "IncrementTotalEarnedXP(${1:int iPlayerID}, ${2:int iXP}, ${3:int nReason})" },
		{ "trigger": "IsBroadcaster", "contents": "IsBroadcaster(${1:int iPlayerID})" },
		{ "trigger": "IsDisableHelpSetForPlayerID", "contents": "IsDisableHelpSetForPlayerID(${1:int nPlayerID}, ${2:int nOtherPlayerID})" },
		{ "trigger": "IsFakeClient", "contents": "IsFakeClient(${1:int iPlayerID})" },
		{ "trigger": "IsHeroSelected", "contents": "IsHeroSelected(${1:string pHeroname})" },
		{ "trigger": "IsHeroSharedWithPlayerID", "contents": "IsHeroSharedWithPlayerID(${1:int nUnitOwnerPlayerID}, ${2:int nOtherPlayerID})" },
		{ "trigger": "ModifyGold", "contents": "ModifyGold(${1:int playerID}, ${2:int goldAmmt}, ${3:bool reliable}, ${4:int nReason})" },
		{ "trigger": "ReplaceHeroWith", "contents": "ReplaceHeroWith(${1:int iPlayerID}, ${2:string pszHeroClass}, ${3:int nGold}, ${4:int nXP})" },
		{ "trigger": "ResetBuybackCostTime", "contents": "ResetBuybackCostTime(${1:int nPlayerID})" },
		{ "trigger": "ResetTotalEarnedGold", "contents": "ResetTotalEarnedGold(${1:int iPlayerID})" },
		{ "trigger": "SetBuybackCooldownTime", "contents": "SetBuybackCooldownTime(${1:int nPlayerID}, ${2:float flBuybackCooldown})" },
		{ "trigger": "SetBuybackGoldLimitTime", "contents": "SetBuybackGoldLimitTime(${1:int nPlayerID}, ${2:float flBuybackCooldown})" },
		{ "trigger": "SetCameraTarget", "contents": "SetCameraTarget(${1:int nPlayerID}, ${2:handle hTarget})" },
		{ "trigger": "SetCustomBuybackCooldown", "contents": "SetCustomBuybackCooldown(${1:int iPlayerID}, ${2:float flCooldownTime})" },
		{ "trigger": "SetCustomBuybackCost", "contents": "SetCustomBuybackCost(${1:int iPlayerID}, ${2:int iGoldCost})" },
		{ "trigger": "SetLastBuybackTime", "contents": "SetLastBuybackTime(${1:int iPlayerID}, ${2:int iLastBuybackTime})" },
		{ "trigger": "SetPlayerReservedState", "contents": "SetPlayerReservedState(${1:int iPlayerID}, ${2:bool bReserved})" },
		{ "trigger": "SetUnitShareMaskForPlayer", "contents": "SetUnitShareMaskForPlayer(${1:int nPlayerID}, ${2:int nOtherPlayerID}, ${3:int nFlag}, ${4:bool bState})" },
		{ "trigger": "UpdateTeamSlot", "contents": "UpdateTeamSlot(${1:int iPlayerID}, ${2:int iTeamNumber}, ${3:bool bFromLobby})" },
		{ "trigger": "WhoSelectedHero", "contents": "WhoSelectedHero(${1:string pHeroFilename})" },
		{ "trigger": "SetEnabled", "contents": "SetEnabled(${1:bool enabled}, ${2:bool bForce})" },
		{ "trigger": "Axis", "contents": "Axis(${1:Vector Vector_1}, ${2:Quaternion Quaternion_2}, ${3:float float_3}, ${4:bool bool_4}, ${5:float float_5})" },
		{ "trigger": "Box", "contents": "Box(${1:Vector Vector_1}, ${2:Vector Vector_2}, ${3:int int_3}, ${4:int int_4}, ${5:int int_5}, ${6:int int_6}, ${7:bool bool_7}, ${8:float float_8})" },
		{ "trigger": "BoxAngles", "contents": "BoxAngles(${1:Vector Vector_1}, ${2:Vector Vector_2}, ${3:Vector Vector_3}, ${4:Quaternion Quaternion_4}, ${5:int int_5}, ${6:int int_6}, ${7:int int_7}, ${8:int int_8}, ${9:bool bool_9}, ${10:float float_10})" },
		{ "trigger": "Capsule", "contents": "Capsule(${1:Vector Vector_1}, ${2:Quaternion Quaternion_2}, ${3:float float_3}, ${4:float float_4}, ${5:int int_5}, ${6:int int_6}, ${7:int int_7}, ${8:int int_8}, ${9:bool bool_9}, ${10:float float_10})" },
		{ "trigger": "Circle", "contents": "Circle(${1:Vector Vector_1}, ${2:Quaternion Quaternion_2}, ${3:float float_3}, ${4:int int_4}, ${5:int int_5}, ${6:int int_6}, ${7:int int_7}, ${8:bool bool_8}, ${9:float float_9})" },
		{ "trigger": "CircleScreenOriented", "contents": "CircleScreenOriented(${1:Vector Vector_1}, ${2:float float_2}, ${3:int int_3}, ${4:int int_4}, ${5:int int_5}, ${6:int int_6}, ${7:bool bool_7}, ${8:float float_8})" },
		{ "trigger": "Cone", "contents": "Cone(${1:Vector Vector_1}, ${2:Vector Vector_2}, ${3:float float_3}, ${4:float float_4}, ${5:int int_5}, ${6:int int_6}, ${7:int int_7}, ${8:int int_8}, ${9:bool bool_9}, ${10:float float_10})" },
		{ "trigger": "Cross", "contents": "Cross(${1:Vector Vector_1}, ${2:float float_2}, ${3:int int_3}, ${4:int int_4}, ${5:int int_5}, ${6:int int_6}, ${7:bool bool_7}, ${8:float float_8})" },
		{ "trigger": "Cross3D", "contents": "Cross3D(${1:Vector Vector_1}, ${2:float float_2}, ${3:int int_3}, ${4:int int_4}, ${5:int int_5}, ${6:int int_6}, ${7:bool bool_7}, ${8:float float_8})" },
		{ "trigger": "Cross3DOriented", "contents": "Cross3DOriented(${1:Vector Vector_1}, ${2:Quaternion Quaternion_2}, ${3:float float_3}, ${4:int int_4}, ${5:int int_5}, ${6:int int_6}, ${7:int int_7}, ${8:bool bool_8}, ${9:float float_9})" },
		{ "trigger": "DrawTickMarkedLine", "contents": "DrawTickMarkedLine(${1:Vector Vector_1}, ${2:Vector Vector_2}, ${3:float float_3}, ${4:int int_4}, ${5:int int_5}, ${6:int int_6}, ${7:int int_7}, ${8:int int_8}, ${9:bool bool_9}, ${10:float float_10})" },
		{ "trigger": "EntityAttachments", "contents": "EntityAttachments(${1:ehandle ehandle_1}, ${2:float float_2}, ${3:float float_3})" },
		{ "trigger": "EntityAxis", "contents": "EntityAxis(${1:ehandle ehandle_1}, ${2:float float_2}, ${3:bool bool_3}, ${4:float float_4})" },
		{ "trigger": "EntityBounds", "contents": "EntityBounds(${1:ehandle ehandle_1}, ${2:int int_2}, ${3:int int_3}, ${4:int int_4}, ${5:int int_5}, ${6:bool bool_6}, ${7:float float_7})" },
		{ "trigger": "EntitySkeleton", "contents": "EntitySkeleton(${1:ehandle ehandle_1}, ${2:float float_2})" },
		{ "trigger": "EntityText", "contents": "EntityText(${1:ehandle ehandle_1}, ${2:int int_2}, ${3:string string_3}, ${4:int int_4}, ${5:int int_5}, ${6:int int_6}, ${7:int int_7}, ${8:float float_8})" },
		{ "trigger": "FilledRect2D", "contents": "FilledRect2D(${1:Vector2D Vector2D_1}, ${2:Vector2D Vector2D_2}, ${3:int int_3}, ${4:int int_4}, ${5:int int_5}, ${6:int int_6}, ${7:float float_7})" },
		{ "trigger": "HorzArrow", "contents": "HorzArrow(${1:Vector Vector_1}, ${2:Vector Vector_2}, ${3:float float_3}, ${4:int int_4}, ${5:int int_5}, ${6:int int_6}, ${7:int int_7}, ${8:bool bool_8}, ${9:float float_9})" },
		{ "trigger": "Line", "contents": "Line(${1:Vector Vector_1}, ${2:Vector Vector_2}, ${3:int int_3}, ${4:int int_4}, ${5:int int_5}, ${6:int int_6}, ${7:bool bool_7}, ${8:float float_8})" },
		{ "trigger": "Line2D", "contents": "Line2D(${1:Vector2D Vector2D_1}, ${2:Vector2D Vector2D_2}, ${3:int int_3}, ${4:int int_4}, ${5:int int_5}, ${6:int int_6}, ${7:float float_7})" },
		{ "trigger": "PushAndClearDebugOverlayScope", "contents": "PushAndClearDebugOverlayScope(${1:utlstringtoken utlstringtoken_1})" },
		{ "trigger": "PushDebugOverlayScope", "contents": "PushDebugOverlayScope(${1:utlstringtoken utlstringtoken_1})" },
		{ "trigger": "RemoveAllInScope", "contents": "RemoveAllInScope(${1:utlstringtoken utlstringtoken_1})" },
		{ "trigger": "SolidCone", "contents": "SolidCone(${1:Vector Vector_1}, ${2:Vector Vector_2}, ${3:float float_3}, ${4:float float_4}, ${5:int int_5}, ${6:int int_6}, ${7:int int_7}, ${8:int int_8}, ${9:bool bool_9}, ${10:float float_10})" },
		{ "trigger": "Sphere", "contents": "Sphere(${1:Vector Vector_1}, ${2:float float_2}, ${3:int int_3}, ${4:int int_4}, ${5:int int_5}, ${6:int int_6}, ${7:bool bool_7}, ${8:float float_8})" },
		{ "trigger": "SweptBox", "contents": "SweptBox(${1:Vector Vector_1}, ${2:Vector Vector_2}, ${3:Vector Vector_3}, ${4:Vector Vector_4}, ${5:Quaternion Quaternion_5}, ${6:int int_6}, ${7:int int_7}, ${8:int int_8}, ${9:int int_9}, ${10:float float_10})" },
		{ "trigger": "Text", "contents": "Text(${1:Vector Vector_1}, ${2:int int_2}, ${3:string string_3}, ${4:float float_4}, ${5:int int_5}, ${6:int int_6}, ${7:int int_7}, ${8:int int_8}, ${9:float float_9})" },
		{ "trigger": "Texture", "contents": "Texture(${1:string string_1}, ${2:Vector2D Vector2D_2}, ${3:Vector2D Vector2D_3}, ${4:int int_4}, ${5:int int_5}, ${6:int int_6}, ${7:int int_7}, ${8:Vector2D Vector2D_8}, ${9:Vector2D Vector2D_9}, ${10:float float_10})" },
		{ "trigger": "Triangle", "contents": "Triangle(${1:Vector Vector_1}, ${2:Vector Vector_2}, ${3:Vector Vector_3}, ${4:int int_4}, ${5:int int_5}, ${6:int int_6}, ${7:int int_7}, ${8:bool bool_8}, ${9:float float_9})" },
		{ "trigger": "VectorText3D", "contents": "VectorText3D(${1:Vector Vector_1}, ${2:Quaternion Quaternion_2}, ${3:string string_3}, ${4:int int_4}, ${5:int int_5}, ${6:int int_6}, ${7:int int_7}, ${8:bool bool_8}, ${9:float float_9})" },
		{ "trigger": "VertArrow", "contents": "VertArrow(${1:Vector Vector_1}, ${2:Vector Vector_2}, ${3:float float_3}, ${4:int int_4}, ${5:int int_5}, ${6:int int_6}, ${7:int int_7}, ${8:bool bool_8}, ${9:float float_9})" },
		{ "trigger": "YawArrow", "contents": "YawArrow(${1:Vector Vector_1}, ${2:float float_2}, ${3:float float_3}, ${4:float float_4}, ${5:int int_5}, ${6:int int_6}, ${7:int int_7}, ${8:int int_8}, ${9:bool bool_9}, ${10:float float_10})" },
		{ "trigger": "AddSubquest", "contents": "AddSubquest(${1:handle hSubquest})" },
		{ "trigger": "GetSubquest", "contents": "GetSubquest(${1:int nIndex})" },
		{ "trigger": "GetSubquestByName", "contents": "GetSubquestByName(${1:string pszName})" },
		{ "trigger": "RemoveSubquest", "contents": "RemoveSubquest(${1:handle hSubquest})" },
		{ "trigger": "SetTextReplaceString", "contents": "SetTextReplaceString(${1:string pszString})" },
		{ "trigger": "SetTextReplaceValue", "contents": "SetTextReplaceValue(${1:int valueSlot}, ${2:int value})" },
		{ "trigger": "SetTextReplaceString", "contents": "SetTextReplaceString(${1:string pszString})" },
		{ "trigger": "SetTextReplaceValue", "contents": "SetTextReplaceValue(${1:int valueSlot}, ${2:int value})" },
		{ "trigger": "FindAllByClassname", "contents": "FindAllByClassname(${1:string string_1})" },
		{ "trigger": "FindAllByClassnameWithin", "contents": "FindAllByClassnameWithin(${1:string string_1}, ${2:Vector Vector_2}, ${3:float float_3})" },
		{ "trigger": "ConnectOutput", "contents": "ConnectOutput(${1:string string_1}, ${2:string string_2})" },
		{ "trigger": "DisconnectOutput", "contents": "DisconnectOutput(${1:string string_1}, ${2:string string_2})" },
		{ "trigger": "DisconnectRedirectedOutput", "contents": "DisconnectRedirectedOutput(${1:string string_1}, ${2:string string_2}, ${3:handle handle_3})" },
		{ "trigger": "GetIntAttr", "contents": "GetIntAttr(${1:string string_1})" },
		{ "trigger": "RedirectOutput", "contents": "RedirectOutput(${1:string string_1}, ${2:string string_2}, ${3:handle handle_3})" },
		{ "trigger": "SetIntAttr", "contents": "SetIntAttr(${1:string string_1}, ${2:int int_2})" },
		{ "trigger": "SpawnEntityAtEntityOrigin", "contents": "SpawnEntityAtEntityOrigin(${1:handle hEntity})" },
		{ "trigger": "SpawnEntityAtLocation", "contents": "SpawnEntityAtLocation(${1:Vector vecAlternateOrigin}, ${2:Vector vecAlternateAngles})" },
		{ "trigger": "SpawnEntityAtNamedEntityOrigin", "contents": "SpawnEntityAtNamedEntityOrigin(${1:string pszName})" },
		{ "trigger": "SetFarRange", "contents": "SetFarRange(${1:float flRange})" },
		{ "trigger": "SetLinearAttenuation", "contents": "SetLinearAttenuation(${1:float flAtten})" },
		{ "trigger": "SetNearRange", "contents": "SetNearRange(${1:float flRange})" },
		{ "trigger": "SetQuadraticAttenuation", "contents": "SetQuadraticAttenuation(${1:float flAtten})" },
		{ "trigger": "SetVolumetrics", "contents": "SetVolumetrics(${1:bool bOn}, ${2:float flIntensity}, ${3:float flNoise}, ${4:int nPlanes}, ${5:float flPlaneOffset})" },
		{ "trigger": "QueryColor", "contents": "QueryColor(${1:utlstringtoken tok}, ${2:Vector vDefault})" },
		{ "trigger": "QueryFloat", "contents": "QueryFloat(${1:utlstringtoken tok}, ${2:float flDefault})" },
		{ "trigger": "QueryInt", "contents": "QueryInt(${1:utlstringtoken tok}, ${2:int nDefault})" },
		{ "trigger": "QueryNumber", "contents": "QueryNumber(${1:utlstringtoken tok}, ${2:float flDefault})" },
		{ "trigger": "QueryString", "contents": "QueryString(${1:utlstringtoken tok}, ${2:string pDefault})" },
		{ "trigger": "QueryVector", "contents": "QueryVector(${1:utlstringtoken tok}, ${2:Vector vDefault})" },
		{ "trigger": "HasTag", "contents": "HasTag(${1:string pszTagName})" },
		{ "trigger": "AddOutput", "contents": "AddOutput(${1:string string_1}, ${2:string string_2})" },
		{ "trigger": "Init", "contents": "Init(${1:int int_1})" },
		{ "trigger": "ExpensiveInstantRayCast", "contents": "ExpensiveInstantRayCast(${1:Vector Vector_1}, ${2:Vector Vector_2}, ${3:handle handle_3})" },
		{ "trigger": "SetSpawnCallback", "contents": "SetSpawnCallback(${1:handle hCallbackFunc}, ${2:handle hCallbackScope})" },
		{ "trigger": "AddBroadcastTeamTarget", "contents": "AddBroadcastTeamTarget(${1:int int_1})" },
		{ "trigger": "FindNamedEntity", "contents": "FindNamedEntity(${1:string string_1})" },
		{ "trigger": "LoadSceneFromString", "contents": "LoadSceneFromString(${1:string string_1}, ${2:string string_2})" },
		{ "trigger": "RemoveBroadcastTeamTarget", "contents": "RemoveBroadcastTeamTarget(${1:int int_1})" },
		{ "trigger": "Start", "contents": "Start(${1:handle handle_1})" },
		{ "trigger": "GetValue", "contents": "GetValue(${1:string string_1})" },
		{ "trigger": "GetParticleReplacement", "contents": "GetParticleReplacement(${1:string string_1}, ${2:handle handle_2})" },
		{ "trigger": "SetParticleAlwaysSimulate", "contents": "SetParticleAlwaysSimulate(${1:int int_1})" },
		{ "trigger": "SetParticleControlEnt", "contents": "SetParticleControlEnt(${1:int int_1}, ${2:int int_2}, ${3:handle handle_3}, ${4:int int_4}, ${5:string string_5}, ${6:Vector Vector_6}, ${7:bool bool_7})" },
		{ "trigger": "AddResource", "contents": "AddResource(${1:string string_1})" },
		{ "trigger": "GetValue", "contents": "GetValue(${1:string string_1})" },
		{ "trigger": "SetBloomScale", "contents": "SetBloomScale(${1:float float_1})" },
		{ "trigger": "SetMaxExposure", "contents": "SetMaxExposure(${1:float float_1})" },
		{ "trigger": "SetMinExposure", "contents": "SetMinExposure(${1:float float_1})" },
		{ "trigger": "GetInt", "contents": "GetInt(${1:string string_1})" },
		{ "trigger": "SetInt", "contents": "SetInt(${1:string string_1}, ${2:int int_2})" },
		{ "trigger": "SetStr", "contents": "SetStr(${1:string string_1}, ${2:string string_2})" },
		{ "trigger": "GridPosToWorldCenterX", "contents": "GridPosToWorldCenterX(${1:int int_1})" },
		{ "trigger": "GridPosToWorldCenterY", "contents": "GridPosToWorldCenterY(${1:int int_1})" },
		{ "trigger": "IsBlocked", "contents": "IsBlocked(${1:Vector Vector_1})" },
		{ "trigger": "IsNearbyTree", "contents": "IsNearbyTree(${1:Vector position}, ${2:float radius}, ${3:bool bool_3})" },
		{ "trigger": "IsTraversable", "contents": "IsTraversable(${1:Vector Vector_1})" },
		{ "trigger": "WorldToGridPosX", "contents": "WorldToGridPosX(${1:float float_1})" },
		{ "trigger": "WorldToGridPosY", "contents": "WorldToGridPosY(${1:float float_1})" },
		{ "trigger": "CreateTrackingProjectile", "contents": "CreateTrackingProjectile(${1:handle handle_1})" },
		{ "trigger": "DestroyLinearProjectile", "contents": "DestroyLinearProjectile(${1:int int_1})" },
		{ "trigger": "ProjectileDodge", "contents": "ProjectileDodge(${1:handle handle_1})" }
	]
}